
 in article <1993apr23.102935.17390@miavx1.acs.muohio.edu>
 sjmadsen@nextsrv.cas.muohio.edu (steve madsen) writes: 
 
 backupable, if restored to the same machine >>(depends>> on the
 programmer...  don't use a disk drive characteristic!) if the user >> did
 an upgrade to the machine, he/she should reinstall all programs any way.
 >> no document look-up, no disk wear-and-tear! > 
 
 > this is not a good idea.. i upgraded my motherboard last fall.  i >would
 have been quite pissed at any software that would have forced me to
 >reinstall simply because i changed motherboards. >
 
 opinion is understandable.  :-)  i assume you have a tape drive?  not all
 of us have about 200 floppies around for backup, you know.  
 
 > any info in the bios is too volatile to use as a checksum.  are you
 >going to require that a user re-install all their software if they add
 4mb >of ram to their computer?  i did that a couple of weeks ago.  it's in
 the >bios, and if software had told me "this isn't the machine you
 installed me >on" i would never have used that software again.  really bad
 idea. 
 
 ram is something you add all the time, so no.  it's more like bios
 manufacturer and/or processor type (386/486/etc).  data cannot be used,
 esp with these new flash rom bios machines with updates on a diskette.
 
 on the other hand, to make this less intrusive it could be disguised as
 "please insert original disk #xx as i need file yyyyyy for update".  :-) 
 it would be perfectly reasonable...  sort of.
 
 > >> i did not say that the originals would allow only one install.  the
 user's >> conscience should do that. 
 
 > > this is silly.  it's much easier to loan disks to a friend and let
 >them do an install than to backup your copy already on disk, and then
 give >them that.  your scheme isn't going to stop anyone. 
 
 of course it is easier.  are you saying then the originals should allow
 only one install?  what is your point?
 
 > >> you know how many bytes you need to change in x-wing to disable >>
 the quiz?  two!  yes, two!  (and don't ask me which ones they are.)
 
 > > do you know any assembly language at all?  all anyone needs to do if
 >find the part of the code that does the quiz, and insert a jmp
 instruction >to just completely skip it.  not that difficult, really!  and
 there is very >little that commpanies can do to stop this type of thing. 
 using pklite or >some similar utility would help, but only if the
 resulting compressed .exe >were tagged as uncompressable. 
 
 i know x86 and 680x0 assembly quite well, thank you.  i know exactly which
 two bytes need to be changed, i have the code to do them too.  i just said
 "don't ask me which ones."  i didn't say i don't know what that means.
 
 such hacking can be easily discouraged by adding anti-patching code which
 does a self-check upon execution and refuse to load if crc does not match
 value stored (encrypted, of course) in the program.  it could be claimed
 as a part of anti-virus code, and it would not be far from the truth. 
 
 > >> what i believe the companies should do is implement the above plus >>
 a special patch once the user registers that loudly exclaims upon bootup
 >> "registered to xxxxx -- address, city, state zip" and disables the
 above. 
 
 > > this is by far the best idea you presented in your post.  making it
 >plainly obvious who registered is going to stop casual pirates. but, the
 >determined ones are just going to answer "joe blow" to the question of
 >"what's your name" so this won't stop them in the long run. 
 
 did anyone read what i wrote?  that is not what i wrote! (or meant!)  
 
 what i said was the program should have certain restriction (such as the
 restrict-to-one-machine) until the program is registered with the
 manufacturer.  the manufacturer will then supply the
 then-proven-legitimate-user with a patch that will disable the restriction
 and proudly proclaim the legal copy with the "registered to xxx" screen.
 
 > > pirates are always going to win this fight.  they simply have more
 >time to work on the software and figure out the protection scheme. 
 
 of course they will, but that was not my point.  the purpose of copy
 protection is to discourage casual pirates ("oh, can i have a copy of
 that?"/"sure, here.") and the less sophisticated pirates ("let's look for
 all those calls to int13h...") .  any one determined enough to break copy
 protection can and will succeed.  they can always backtrace the entire
 load-sequence of the program.  the point of copy protection is to make
 such attempts take as long as possible while not intruding upon the uses
 (or to minimize such intrusion) of legitimate use.  pirates who see copy
 protection as a challenge love breaking them, and no amount of copy
 protection will stop them, but the rest of us will be stopped.  how many
 of these hardcore pirates are there compared to rest of us?  not that many.
 
 --kasey chang
 