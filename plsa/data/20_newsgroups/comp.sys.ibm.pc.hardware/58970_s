
 hello.  i hope somebody out here can help me.  i am currently working
 on a project where i am trying to communicate from an ibm 386 with
 phoenix bios, using c++, to a board that i made with an intel 8085 cpu
 with uart chip.  the board works fine with the transmit command and 
 terminal emulation mode of kermit, but there seems to be something wrong
 with the initialization or protocol used when i try c++.  i need to
 access the unit i built using c, because i have a sizable chunk of c
 code that i will be using to perform calculations and operations that
 will be very difficult to code in assembly language for the 8085.
 
 i have included the assembly code that i am running and the c++ code
 that i am trying to use.  if anyone can show me something that i
 am doing blatantly incorrectly or that i am missing because of my lack
 of knowledge about rs-232 serial communications, please e-mail me.
 i wrote the assembly language to wait for a character to be received and
 then to check it against the 0x20 character, if a 0x20 is received, 
 the leds will indicate this.  two c++ programs that i have written do
 nothing, but set up com port 2 and send the 0x20 character.  one uses
 the bioscom() function in bios.h the other uses the software interrupt
 int86() function in dos.h.  i have triple checked the baud rate ( 2400 )
 the parity ( none ) the stop bits ( 1 ) the character length ( 8 bits )
 and the interrupt calls for ( 0x14 ).  currently, i am at a loss as
 to what may be wrong.  any hardware gurus out there want to comment?
 
 
 						thanks alot,
 						hubert de jesus
 						dejesus@eniac.seas.upenn.edu
 
 
   				intel asm
 
 command     equ     3000h                ;command register on 8155
 porta       equ     3001h                ;port a on 8155
 timerlo     equ     3004h                ;high 8 bits of 8155 timer
 timerhi     equ     3005h                ;low 8 bits of 8155 timer
 uartdata    equ     e000h                ;uart data register
 uartcmd     equ     e001h                ;uart command register
 
             org     4000h                ;sram location
 	    mvi     a,08h		 ;set low timer bits
             sta     timerlo
             mvi     a,40h		 ;set high timer bits
             sta     timerhi
             mvi     a,11111101b          ;start timer & enable port a
             sta     command
 
             mvi     a,11h                ;display 11 on 7-segment leds
             sta     porta
 
             mvi     a,00h		 ;clear uart command
             sta     uartcmd
             sta     uartcmd
             sta     uartcmd
             mvi     a,01000000b		 ;internally reset uart 
             sta     uartcmd
 	    lda     uartdata             ;remove extraneous data
  	    mvi     a,01001111b          ;init uart for 8 data bits,
             sta     uartcmd              ;  no parity, 1 stop bit, 64x async
             mvi     a,00100111b          ;enable transmit and receive
             sta     uartcmd
 
 init:       lda     uartcmd		 ;read status register
             ani     02h                  ;is rxrdy?
             jz      init                 ;no, loop
 
             lda     uartdata             ;read data character
             cpi     ' '                  ;is character = 0x20?
             jnz     init                 ;no, loop
      
             mvi     a,22h                ;character received, 
             sta     porta                ;  display 22 on 7-segment leds
             hlt
             end
 
                               c++ using bioscom()
 
 #include <stdio.h>
 #include <stdlib.h>
 #include <bios.h>
 
 #define init          0
 #define send          1
 #define receive       2
 #define status        3
 
 #define com2          1
 
 void
 main()
 {
    char abyte;
 
    abyte = 0xa3;
    bioscom( init, abyte, com2 );
    printf( "initialized comm port 2\n" );
 
    while( !( bioscom( status, 0, com2 ) & 0x4000 ) )
      ;
    abyte = ' ';
    bioscom( send, abyte, com2 );
    printf( "sent start character\n" );
 }
 
 
         			c++ using int86()
 
 #include <stdio.h>
 #include <stdlib.h>
 #include <dos.h>
 #include <bios.h>
 
 main()
 {
    union regs registers;
   
    registers.h.ah = 0x00;
    registers.h.al = 0xa7; 
    registers.x.dx = 0x01;
    int86( 0x14, &registers, &registers );
    printf( "com2 initialized\n" );
  
    registers.h.ah = 0x01;
    registers.h.al = 0x20;
    registers.x.dx = 0x01;
    int86( 0x14, &registers, &registers );
    printf( "sent start character\n" );
  }
 