
 
 i am seeking some alternate solutions on how to turn a postscript type 1 or
 truetype font outline into polygons that can be subsequently scan converted
 by a 3d scanline renderer. 
 
 i have been studying the problem of font conversion for a few years but
 have never had the need to implement such a system. well, i now have the
 opportunity to write some font rendering software so i would like to have
 some of my questions answered before i jump into the deep end.
 
 the main problem i face is how to use the even/odd or non-winding rules to
 turn the outlines into a single outline polygon (my renderer can handle
 complex polygons so there is no need to reduce the polygons to simple
 polygons). for example, in the letter "o" there are two outlines:
 
 	1) the outside outline which is clockwise (truetype font)
 	2) the inside outline which is counterclockwise.
 
 one common solution used by a number of rendering packages is to simply 
 connect the inner outline to the outer outline at the point where the
 two outlines are closest. this is equivalent to descibing a "polygon with
 holes". the renderer will then make the appropriate hole since the interior
 polygon edges are in the opposite direction to the outside edges.
 
 i do not want to use this simplistic system since:
 
 	1) it will not handle all outline fonts properly (it is not a simple
 		matter to connect the outer outline to the inner outline for
 		some fancy fonts).
 	2) it does not properly handle the even/odd or non-winding rules.
 
 from my research over the years the proper solution is to use a trapezoid
 decomposition algorithm to scan convert the outlines into trapezoids (as
 is done by the postscript and truetype font rasterizers). these trapezoidal
 polygons can then be easily and properly rendered by the 3d scanline renderer.
 
 my question is: are there any better solutions to turning the outlines into
 polgyons other than the trapezoid decomposer? i am not fond of this solution
 since it creates excess number of polygons.
 
 another question, for those in the know: what is the best algorithm to create
 bevelled and/or offset curves for font outlines? i have a dozen papers on these
 subjects but i can't tell which method is the best to implement.
 
 thanks for any pointers.
 
 --> rob lansdale
 
 -- 
 robert lansdale - (416) 978-6619       dynamic graphics project	
 internet: lansd@dgp.toronto.edu        computer systems research institute
 uucp:   ..!uunet!dgp.toronto.edu!lansd university of toronto
 bitnet:	  lansd@dgp.utoronto           toronto, ontario m5s 1a4, canada
 