
 remco hartog (remcoha@htsa.aha.nl) wrote:
 : i have a little question:
 : 
 : i need to convert rgb-coded (red-green-blue) colors into hvs-coded
 : (hue-value-saturnation) colors. does anyone know which formulas to
 : use?
 
 lets see if i have this right... hsv == hsb == hsl ... and none of those
 are the same as hls.  hopefully, hvs is just a transposition of hsv, and
 not yet another color model... 
 
 the following code should do the hsv (hsl) coding (i haven't tried it yet)
 (thanks to bultman@dgw.rws.nl)
 
 another possibility is /mirrors/msdos/graphics/graphgem.zip on
 wuarchive.wustl.edu.
 
 bill neisius
 bill@solaria.hac.com
 
 ----------------
 
 the following code is from the starbase (hp) manual:
 (all coordinates noralised at 0-1 interval)
 
      hsl_to_rgb(hue, saturation, luminosity, red, green, blue)
      float   hue, saturation, luminosity;    /* input in hsl */
      float   *red, *green, *blue;            /* output in rgb */
      {
          float       frac, lx, ly, lz;       /* temporaries */
 
          hue = 6 * hue;
          frac = hue - (int) hue;
          lx = luminosity * (1 - saturation);
          ly = luminosity * (1 - saturation * frac);
          lz = luminosity * (1 - saturation * (1 - frac));
  
          switch ((int) hue) {
              case 0: case 6:
                  *red = luminosity; *green = lz; *blue = lx; break;
              case 1:
                  *red = ly; *green = luminosity; *blue = lx; break;
              case 2:
                  *red = lx; *green = luminosity; *blue = lz; break;
              case 3:
                  *red = lx; *green = ly; *blue = luminosity; break;
              case 4:
                  *red = lz; *green = lx; *blue = luminosity; break;
              case 5:
                  *red = luminosity; *green = lx; *blue = ly; break;
          }
      }
      /******************************************************************************/
      rgb_to_hsl(red, green, blue, hue, saturation, luminosity)
      #define max(a, b, c)    ((a>b?a:b)>c?(a>b?a:b):c)
      #define min(a, b, c)    ((a<b?a:b)<c?(a<b?a:b):c)
      float   red, green, blue;               /* input in rgb */
      float   *hue, *saturation, *luminosity; /* output in hsl */
      {
          float       x, tempr, tempg, tempb; /* temporary values */
 
          *hue = 0.0;
          *saturation = 1.0;
          *luminosity = max(red, green, blue);
          x = min(red, green, blue);
          if (*luminosity != 0.0) {           /* calculate only if necessary */
              *saturation = (*luminosity - x) / *luminosity;
              if (*saturation != 0.0) {       /* calculate only if necessary */
                  tempr = (*luminosity - red  ) / (*luminosity - x);
                  tempg = (*luminosity - green) / (*luminosity - x);
                  tempb = (*luminosity - blue ) / (*luminosity - x);
                  if (red == *luminosity)
                      *hue = (green == x ? 5 + tempb : 1 - tempg);
                  else if (green == *luminosity)
                      *hue = (blue == x ? 1 + tempr : 3 - tempb);
                  else
                      *hue = (red == x ? 3 + tempg : 5 - tempr);
                  *hue /= 6;
              }
          }
      }
 
 
 