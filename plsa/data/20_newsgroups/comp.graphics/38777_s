
 osprey@ux4.cso.uiuc.edu (lucas adamski) writes:
 
 >in article <7306@pdxgate.uucp> idr@rigel.cs.pdx.edu (ian d romanick) writes:
 >>what kind of polygons?  shaded?  texturemapped?  hm?  more comes into play with
 >>fast routines than just "polygons".  it would be nice to know exaclty what
 >>system (vga is a start, but what processor?) and a few of the specifics of the
 >>implementation.  you need to give  more info if you want to get any answers! :p
 
 >i don't want texture mapped, cause if i did i'd asked for them. :)  just
 >a simple and fast routine to do filled polygons.  as for the processor, it'd
 >be for a minimum of a 286... maybe 386 if i can't find a good one for 286s.
 >ideally, i want a polyn function that can clip to a user-defined viewport,
 >and write to an arbitrary location in memory.  of course the chances of
 
 ok it is for a game that is 3d and you have listed the characteristics 
 that you are looking for. i think you may have left out a few 
 important parameters. 
 the polygons are all convex. 
 they have less than n sides. (you are drawing meshes walls doors etc.)
 
 i believe that the algorithms you can get that will only draw convex
 polygons can be much more efficient than those that can draw
 concave / self intersecting polygons. 
 this efficiency can largely be attributed to the fact that 
 simple convex polygons only have a left and a right edge on each scan line.
 complex (figure 8 type polygons) can be a bit trickier.
 
 the less than n sides specification especially if it is a very small 
 number like 3 or 4 allow othe optimisations to be made.
 
 thus for a high speed game application i think you are looking for
 code that exploits and is hence limited to drawing simple convex
 polygons.  
 
 >finding something like that are pretty remote, so i guess i'd need the source
 >with it.  oh, and i guess it would need to be in asm otherwise it'd be too
 >slow.  i've seen some polygon routines in c, and they've all been waaay too
 >slow.  its for a 3d vector graphics program.  i've been hunting high and low
 
 it may have been that they were very general purpose algorithms.
 if you limit yourself to 3 or four sided simple convex polygons
 i think you might be suprised how fast a c algorithm with a 
 asm block move to fill each scan line might actually be.
 
 
 >for a polyn function in asm, and i can't find one anywhere that i can use.
 >i've found one or two polyn functions, but my asm is pretty bad, so i won't
 >even try to rewrite them. :)
 >		//lucas.
 