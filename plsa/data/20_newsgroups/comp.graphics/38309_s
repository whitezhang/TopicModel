
 /*
 
 this program doesn't detect edges with compass operators and a laplacian
 operator. it should output 2 raw grey-scale images with edges. the output
 doesn't look like edges at all.
 
 in novicee terms, how do i correct the errors? any improvements are welcome.
 (i'll even accept your corrected code.)
 
 (if i convolve the input.image with a digital gaussian [7 by 7] to remove
 noise, will i get an improvement with the laplacian.)
 
 --------------------------2 types of edge detection-------------------------*/
 #include <stdio.h> 
 #include <math.h> 
 
 #define imagewidth 300
 #define imageheight 300
 
 unsigned char input_image [imageheight][imagewidth];
 
 unsigned char angles_wanted [imageheight][imagewidth];
 unsigned char magnitude_image [imageheight][imagewidth];
 
 int laplace_op1 [3][3] = { 0,-1, 0, -1,4,-1,  0,-1, 0};
 
 int compass_op1 [3][3] = { 1, 1, 1,  0,0, 0, -1,-1,-1};
 int compass_op2 [3][3] = { 1, 1, 0,  1,0,-1,  0,-1,-1};
 int compass_op3 [3][3] = { 1, 0,-1,  1,0,-1,  1, 0,-1};
 int compass_op4 [3][3] = { 0,-1,-1,  1,0,-1,  1, 1, 0};
 int compass_op5 [3][3] = {-1,-1,-1,  0,0, 0,  1, 1, 1};
 int compass_op6 [3][3] = {-1,-1, 0, -1,0, 1,  0, 1, 1};
 int compass_op7 [3][3] = {-1, 0, 1, -1,0, 1, -1, 0, 1};
 int compass_op8 [3][3] = { 0, 1, 1, -1,0, 1, -1,-1, 0};
 
 void compass (row,col)
 int row,col;
 {
   int value;
   int op_rows, op_cols;
   int compass1,compass2,compass3,compass4;
   int compass5,compass6,compass7,compass8;
   
   compass1 = compass2 = compass3 = compass4 = 0;
   compass5 = compass6 = compass7 = compass8 = 0;
   
   for (op_rows = -1; op_rows < 2; op_rows++)
     for (op_cols = -1; op_cols < 2; op_cols++)
       {
 	if (((row + op_rows) >= 0) && ((col + op_cols) >= 0))
 	  {
 	    
 	    compass1 += ((int) input_image [row + op_rows][col + op_cols]) * 
 	                       compass_op1 [op_rows + 1][op_cols + 1];
 	    compass2 += ((int) input_image [row + op_rows][col + op_cols]) * 
 	                       compass_op2 [op_rows + 1][op_cols + 1];
 	    compass3 += ((int) input_image [row + op_rows][col + op_cols]) * 
 	                       compass_op3 [op_rows + 1][op_cols + 1];
 	    compass4 += ((int) input_image [row + op_rows][col + op_cols]) * 
 	                       compass_op4 [op_rows + 1][op_cols + 1];
 	    compass5 += ((int) input_image [row + op_rows][col + op_cols]) * 
 	                       compass_op5 [op_rows + 1][op_cols + 1];
 	    compass6 += ((int) input_image [row + op_rows][col + op_cols]) * 
 	                       compass_op6 [op_rows + 1][op_cols + 1];
 	    compass7 += ((int) input_image [row + op_rows][col + op_cols]) * 
 	                       compass_op7 [op_rows + 1][op_cols + 1];
 	    compass8 += ((int) input_image [row + op_rows][col + op_cols]) * 
 	                       compass_op8 [op_rows + 1][op_cols + 1];
 	    
 	  }
       }
   if (compass1 < compass2)
     value = compass2;
   else 
     value = compass1;      
   if (value < compass3)
     value = compass3;
   if (value < compass4)
     value = compass4;
   if (value < compass5)
     value = compass5;
   if (value < compass6)
     value = compass6;
   if (value < compass7)
     value = compass7;
   if (value < compass8)
     value = compass8;
 
   magnitude_image [row][col] = (char) value;
 }
 
 void laplace1 (row,col)
 int row,col;
 {
   int op_rows, op_cols;
 
   magnitude_image [row][col] = 0;
   for (op_rows = -1; op_rows < 2; op_rows++)
     for (op_cols = -1; op_cols < 2; op_cols++)
       if (((row + op_rows) >= 0) && ((col + op_cols) >= 0))
 	magnitude_image [row][col] = 
 	  (char) ((int)magnitude_image [row][col] +
 		  ((int) input_image [row + op_rows][col + op_cols] * 
 		   laplace_op1 [op_rows + 1][op_cols + 1]));
 }
 
 main  ()
 {
   file *original_image_fp;
   file *laplace1_mag_fp,*laplace2_mag_fp,*laplace3_mag_fp;
   file *compass_mag_fp;
 
   int row, col, algo_count;
 
   original_image_fp = fopen ("input.image","rb");
 
   laplace1_mag_fp = fopen ("laplace1_magnitude","wb");
   compass_mag_fp = fopen ("compass_magnitude","wb");
 
   fread ((unsigned char *) input_image,sizeof(unsigned char),imageheight * imagewidth,original_image_fp);
   for (algo_count = 0; algo_count < 2;algo_count ++)
     {
       for (row = 0; row < imageheight; row++) 
 	for (col = 0; col < imagewidth; col++) 
 	  if (!algo_count)
 	    laplace1 (row,col);
 	  else 
 	    compass (row,col);
       
       if (!algo_count)
 	fwrite(magnitude_image,sizeof(char),imageheight * imagewidth,laplace1_mag_fp);
       else 
 	fwrite(magnitude_image,sizeof(char),imageheight * imagewidth,compass_mag_fp);
     }
 }
 
   
 -- 
 |  .-,                ###|for a lot of .au music: ftp sounds.sdsu.edu
 | /   /   __  ,  _    ###|then cat file.au > /dev/audio
 | \_>/ >_/ (_/\_/<>_     |ub library catalog:telnet bison.acsu.buffalo.edu
 |_                14261 _|(when in doubt ask: xarchie, xgopher, or xwais.)
 