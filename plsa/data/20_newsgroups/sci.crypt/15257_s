
 >>for your application, what you can do is to encrypt the real-time clock
 >>value with a secret key.
 
 well, almost.... if i only had to solve the problem for myself, and were
 willing to have to type in a second password (the secret key) whenever i
 logged in, it could work. however, i'm trying to create a solution that
 anyone can use, and which, once installed, is just as effortless to start up
 as the non-solution of just using xhost(1) to control access. i've got
 religeous problems with storing secret keys on multiuser computers.
 
 >for a good discussion of cryptographically "good" random number
 >generators, check out the draft-ietf-security-randomness-00.txt
 >internet draft, available at your local friendly internet drafts
 >repository.
 
 thanks for the pointer! it was good reading, and i liked the idea of using
 several unrelated sources with a strong mixing function. however, unless i
 missed something, the only source they suggested (aside from a hardware rng)
 that seems available, and unguessable by an intruder, when a unix is
 fresh-booted, is i/o buffers related to network traffic. i believe my
 solution basically uses that strategy, without requiring me to reach into
 the kernel.
 
 >a reasonably source of randomness is the output of a cryptographic
 >hash function (e.g., md5), when fed with a large amount of
 >more-or-less random data. for example, running md5 on /dev/mem is a
 >slow, but random enough, source of random bits; there are bound to be
 >128 bits of entropy in the tens (or hundreds) of megabytes of data in
 >a modern workstation's memory, as a fair amount of them are system
 >timers, i/o buffers, etc.
 
 i heard about this solution, and it sounded good. then i heard that folks
 were experiencing times of 30-60 seconds to run this, on
 reasonably-configured workstations. i'm not willing to add that much delay
 to someone's login process. my approach (etherfind|compress, skip 10k) takes
 a second or two to run. i'm considering writing the be-all and end-all of
 solutions, that launches the md5, and simultaneously tries to suck bits off
 the net, and if the net should be sitting __so__ idle that it can't get 10k
 after compression before md5 finishes, use the md5. this way i could have
 guaranteed good bits, and a deterministic upper bound on login time, and
 still have the common case of login take only a couple of extra seconds.
 
 -bennett
 bet@sbi.com
 