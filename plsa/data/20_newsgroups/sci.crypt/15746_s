
 
 i have an idea as to why the encryption algorithm needs to be keep secret,
 and some things that i think it implies. (of course these could all be
 wrong.....) 
 
 from 
 
                      the clipper chip: a technical summary
                                dorothy denning
                            revised, april 21, 1993
 
 .
 .
 .
 
 the clipper chip contains a classified single-key 64-bit block
 encryption algorithm called "skipjack."  the algorithm uses 80 bit keys
 (compared with 56 for the des) and has 32 rounds of scrambling
 (compared with 16 for the des).  it supports all 4 des modes of
 operation.  the algorithm takes 32 clock ticks, and in electronic
 codebook (ecb) mode runs at 12 mbits per second.
 
 each chip includes the following components:
 
    the skipjack encryption algorithm
    f, an 80-bit family key that is common to all chips
    n, a 30-bit serial number (this length is subject to change)
    u, an 80-bit secret key that unlocks all messages encrypted with the chip
 
 .
 .
 .
 
 encrypting with the chip
 
 to see how the chip is used, imagine that it is embedded in the at&t
 telephone security device (as it will be).  suppose i call someone and
 we both have such a device.  after pushing a button to start a secure
 conversation, my security device will negotiate an 80-bit session key k
 with the device at the other end.  this key negotiation takes place
 without the clipper chip.  in general, any method of key exchange can
 be used such as the diffie-hellman public-key distribution method.
 
 once the session key k is established, the clipper chip is used to
 encrypt the conversation or message stream m (digitized voice).  the
 telephone security device feeds k and m into the chip to produce two
 values:
 
    e[m; k], the encrypted message stream, and 
    e[e[k; u] + n; f], a law enforcement field , 
 
 which are transmitted over the telephone line.  the law enforcement
 field thus contains the session key k encrypted under the unit key u
 concatenated with the serial number n, all encrypted under the family
 key f.  the law enforcement field is decrypted by law enforcement after
 an authorized wiretap has been installed.
 
 ------------------
 
 suppose i knew how the algorithm worked and knew the n for my chip, but
 did not know f, then by cryptanalysis i might be able to determine f from
 if law enforcement field 
    e[e[k; u] + n; f]
 not knowing n would might make this much harder.
 
 now suppose that i know f, (either legitimately or not),
 if i know k (either because i am involved in the conversation, or i know u
 for a party in the conversation), i may now be able to determine u for the
 other party.
 
 if i know f i can also defeat the law enforcement field, since i could
 make my own, with a different k then the one i am using. knowing f also
 allows traffic analysis to be performed. so i might not know what you are
 saying but i could know who you are saying it too.
 
 now i admit that someone trying to compute u will not have lots of
 messages to work from, but since we have no way of knowing that the key
 generation method does not (deliberately?) generate weak keys, or for that
 matter that the published method is in fact used, perhaps the u's will be
 chosen from know weak keys for the system.
 
 obviously the compromise of f would be a disaster, both to law enforcement
 for whom this whole thing is designed, and for the people who believe that
 it is giving them security. f is but one number, and i sure that alot of
 people (more then 1) know what it is (and if some "panel of experts" is
 going to check it over for flaws then many more will know f, forget
 grinding chips, bribery and blackmail work just fine.
 
 so, am i wrong? or are these problems.
 
 jon
 
 