
 i got a number of requests for code.
 so, here it is.
 its written in 80x86 asm. 
 borland tasm will do.
 
 tasm lga.asm
 tlink /t lga.asm
 
 
 the code:
 
 ;----------------------------------------------------------------------
 ; lga ncryption
 ; (c) by nick nassuphis
 ;----------------------------------------------------------------------
 
 code	segment
 	assume	cs:code, ds:code
 	
 	org	100h
 
 start:
 	jmp	begin
 
 ;----------------------------------------------------------------------
 ;
 ; gas particle assigment:
 ;
 ; bit 0    particle moving east
 ; bit 1    particle moving west
 ; bit 2    particle moving north
 ; bit 3    particle moving south
 ;
 ; bit 4    particle moving east
 ; bit 5    particle moving west
 ; bit 6    particle moving north
 ; bit 7    particle moving south
 ;
 ;
 ; collisiong rules:
 ;
 ; 1. gas rules
 ;
 ; if (e & w) and !(n & s) then (e,w)->(n,s)
 ; if (n & s) and !(e & w) then (n,s)->(e,w)
 ;
 ; for nibbles:
 ;
 ; 1100 -> 0011
 ; 0011 -> 0011
 ;
 ; and for bytes:
 ;
 ; 11000000 -> 00110000
 ; 00110000 -> 11000000
 ; 00001100 -> 00000011
 ; 00000011 -> 00001100
 ; 00110011 -> 11001100
 ; 00111100 -> 11000011
 ; 11000011 -> 00111100
 ; 11001100 -> 00110011
 ;
 ;
 ; 2. reflection rules
 ;
 ; just swap bits along directions
 ;
 ;----------------------------------------------------------------------
 
 ;
 ; this look-up table implements two particle collisions
 ; for the hpp lattice gas
 ;
 hpprule:
 db   00000000b   ;00000000
 db   00000001b   ;00000001
 db   00000010b   ;00000010
 db   00001100b   ;00000011
 db   00000100b   ;00000100
 db   00000101b   ;00000101
 db   00000110b   ;00000110
 db   00000111b   ;00000111
 db   00001000b   ;00001000
 db   00001001b   ;00001001
 db   00001010b   ;00001010
 db   00001011b   ;00001011
 db   00000011b   ;00001100
 db   00001101b   ;00001101
 db   00001110b   ;00001110
 db   00001111b   ;00001111
 db   00010000b   ;00010000
 db   00010001b   ;00010001
 db   00010010b   ;00010010
 db   00011100b   ;00010011
 db   00010100b   ;00010100
 db   00010101b   ;00010101
 db   00010110b   ;00010110
 db   00010111b   ;00010111
 db   00011000b   ;00011000
 db   00011001b   ;00011001
 db   00011010b   ;00011010
 db   00011011b   ;00011011
 db   00010011b   ;00011100
 db   00011101b   ;00011101
 db   00011110b   ;00011110
 db   00011111b   ;00011111
 db   00100000b   ;00100000
 db   00100001b   ;00100001
 db   00100010b   ;00100010
 db   00101100b   ;00100011
 db   00100100b   ;00100100
 db   00100101b   ;00100101
 db   00100110b   ;00100110
 db   00100111b   ;00100111
 db   00101000b   ;00101000
 db   00101001b   ;00101001
 db   00101010b   ;00101010
 db   00101011b   ;00101011
 db   00100011b   ;00101100
 db   00101101b   ;00101101
 db   00101110b   ;00101110
 db   00101111b   ;00101111
 db   11000000b   ;00110000
 db   11000001b   ;00110001
 db   11000010b   ;00110010
 db   11001100b   ;00110011
 db   11000100b   ;00110100
 db   11000101b   ;00110101
 db   11000110b   ;00110110
 db   11000111b   ;00110111
 db   11001000b   ;00111000
 db   11001001b   ;00111001
 db   11001010b   ;00111010
 db   11001011b   ;00111011
 db   11000011b   ;00111100
 db   11001101b   ;00111101
 db   11001110b   ;00111110
 db   11001111b   ;00111111
 db   01000000b   ;01000000
 db   01000001b   ;01000001
 db   01000010b   ;01000010
 db   01001100b   ;01000011
 db   01000100b   ;01000100
 db   01000101b   ;01000101
 db   01000110b   ;01000110
 db   01000111b   ;01000111
 db   01001000b   ;01001000
 db   01001001b   ;01001001
 db   01001010b   ;01001010
 db   01001011b   ;01001011
 db   01000011b   ;01001100
 db   01001101b   ;01001101
 db   01001110b   ;01001110
 db   01001111b   ;01001111
 db   01010000b   ;01010000
 db   01010001b   ;01010001
 db   01010010b   ;01010010
 db   01011100b   ;01010011
 db   01010100b   ;01010100
 db   01010101b   ;01010101
 db   01010110b   ;01010110
 db   01010111b   ;01010111
 db   01011000b   ;01011000
 db   01011001b   ;01011001
 db   01011010b   ;01011010
 db   01011011b   ;01011011
 db   01010011b   ;01011100
 db   01011101b   ;01011101
 db   01011110b   ;01011110
 db   01011111b   ;01011111
 db   01100000b   ;01100000
 db   01100001b   ;01100001
 db   01100010b   ;01100010
 db   01101100b   ;01100011
 db   01100100b   ;01100100
 db   01100101b   ;01100101
 db   01100110b   ;01100110
 db   01100111b   ;01100111
 db   01101000b   ;01101000
 db   01101001b   ;01101001
 db   01101010b   ;01101010
 db   01101011b   ;01101011
 db   01100011b   ;01101100
 db   01101101b   ;01101101
 db   01101110b   ;01101110
 db   01101111b   ;01101111
 db   01110000b   ;01110000
 db   01110001b   ;01110001
 db   01110010b   ;01110010
 db   01111100b   ;01110011
 db   01110100b   ;01110100
 db   01110101b   ;01110101
 db   01110110b   ;01110110
 db   01110111b   ;01110111
 db   01111000b   ;01111000
 db   01111001b   ;01111001
 db   01111010b   ;01111010
 db   01111011b   ;01111011
 db   01110011b   ;01111100
 db   01111101b   ;01111101
 db   01111110b   ;01111110
 db   01111111b   ;01111111
 db   10000000b   ;10000000
 db   10000001b   ;10000001
 db   10000010b   ;10000010
 db   10001100b   ;10000011
 db   10000100b   ;10000100
 db   10000101b   ;10000101
 db   10000110b   ;10000110
 db   10000111b   ;10000111
 db   10001000b   ;10001000
 db   10001001b   ;10001001
 db   10001010b   ;10001010
 db   10001011b   ;10001011
 db   10000011b   ;10001100
 db   10001101b   ;10001101
 db   10001110b   ;10001110
 db   10001111b   ;10001111
 db   10010000b   ;10010000
 db   10010001b   ;10010001
 db   10010010b   ;10010010
 db   10011100b   ;10010011
 db   10010100b   ;10010100
 db   10010101b   ;10010101
 db   10010110b   ;10010110
 db   10010111b   ;10010111
 db   10011000b   ;10011000
 db   10011001b   ;10011001
 db   10011010b   ;10011010
 db   10011011b   ;10011011
 db   10010011b   ;10011100
 db   10011101b   ;10011101
 db   10011110b   ;10011110
 db   10011111b   ;10011111
 db   10100000b   ;10100000
 db   10100001b   ;10100001
 db   10100010b   ;10100010
 db   10101100b   ;10100011
 db   10100100b   ;10100100
 db   10100101b   ;10100101
 db   10100110b   ;10100110
 db   10100111b   ;10100111
 db   10101000b   ;10101000
 db   10101001b   ;10101001
 db   10101010b   ;10101010
 db   10101011b   ;10101011
 db   10100011b   ;10101100
 db   10101101b   ;10101101
 db   10101110b   ;10101110
 db   10101111b   ;10101111
 db   10110000b   ;10110000
 db   10110001b   ;10110001
 db   10110010b   ;10110010
 db   10111100b   ;10110011
 db   10110100b   ;10110100
 db   10110101b   ;10110101
 db   10110110b   ;10110110
 db   10110111b   ;10110111
 db   10111000b   ;10111000
 db   10111001b   ;10111001
 db   10111010b   ;10111010
 db   10111011b   ;10111011
 db   10110011b   ;10111100
 db   10111101b   ;10111101
 db   10111110b   ;10111110
 db   10111111b   ;10111111
 db   00110000b   ;11000000
 db   00110001b   ;11000001
 db   00110010b   ;11000010
 db   00111100b   ;11000011
 db   00110100b   ;11000100
 db   00110101b   ;11000101
 db   00110110b   ;11000110
 db   00110111b   ;11000111
 db   00111000b   ;11001000
 db   00111001b   ;11001001
 db   00111010b   ;11001010
 db   00111011b   ;11001011
 db   00110011b   ;11001100
 db   00111101b   ;11001101
 db   00111110b   ;11001110
 db   00111111b   ;11001111
 db   11010000b   ;11010000
 db   11010001b   ;11010001
 db   11010010b   ;11010010
 db   11011100b   ;11010011
 db   11010100b   ;11010100
 db   11010101b   ;11010101
 db   11010110b   ;11010110
 db   11010111b   ;11010111
 db   11011000b   ;11011000
 db   11011001b   ;11011001
 db   11011010b   ;11011010
 db   11011011b   ;11011011
 db   11010011b   ;11011100
 db   11011101b   ;11011101
 db   11011110b   ;11011110
 db   11011111b   ;11011111
 db   11100000b   ;11100000
 db   11100001b   ;11100001
 db   11100010b   ;11100010
 db   11101100b   ;11100011
 db   11100100b   ;11100100
 db   11100101b   ;11100101
 db   11100110b   ;11100110
 db   11100111b   ;11100111
 db   11101000b   ;11101000
 db   11101001b   ;11101001
 db   11101010b   ;11101010
 db   11101011b   ;11101011
 db   11100011b   ;11101100
 db   11101101b   ;11101101
 db   11101110b   ;11101110
 db   11101111b   ;11101111
 db   11110000b   ;11110000
 db   11110001b   ;11110001
 db   11110010b   ;11110010
 db   11111100b   ;11110011
 db   11110100b   ;11110100
 db   11110101b   ;11110101
 db   11110110b   ;11110110
 db   11110111b   ;11110111
 db   11111000b   ;11111000
 db   11111001b   ;11111001
 db   11111010b   ;11111010
 db   11111011b   ;11111011
 db   11110011b   ;11111100
 db   11111101b   ;11111101
 db   11111110b   ;11111110
 db   11111111b   ;11111111
 
 ;
 ; this rule implements the velocity-reversal needed to
 ; run the gas evolution in reverse. its called a wallrule
 ; because its the same as is all particles hit a wall
 ; head on.
 ;
 wallrule:
 db   00000000b   ;00000000
 db   00000010b   ;00000001
 db   00000001b   ;00000010
 db   00001100b   ;00000011
 db   00001000b   ;00000100
 db   00001010b   ;00000101
 db   00001001b   ;00000110
 db   00001011b   ;00000111
 db   00000100b   ;00001000
 db   00000110b   ;00001001
 db   00000101b   ;00001010
 db   00000111b   ;00001011
 db   00000011b   ;00001100
 db   00001110b   ;00001101
 db   00001101b   ;00001110
 db   00001111b   ;00001111
 db   00100000b   ;00010000
 db   00100010b   ;00010001
 db   00100001b   ;00010010
 db   00101100b   ;00010011
 db   00101000b   ;00010100
 db   00101010b   ;00010101
 db   00101001b   ;00010110
 db   00101011b   ;00010111
 db   00100100b   ;00011000
 db   00100110b   ;00011001
 db   00100101b   ;00011010
 db   00100111b   ;00011011
 db   00100011b   ;00011100
 db   00101110b   ;00011101
 db   00101101b   ;00011110
 db   00101111b   ;00011111
 db   00010000b   ;00100000
 db   00010010b   ;00100001
 db   00010001b   ;00100010
 db   00011100b   ;00100011
 db   00011000b   ;00100100
 db   00011010b   ;00100101
 db   00011001b   ;00100110
 db   00011011b   ;00100111
 db   00010100b   ;00101000
 db   00010110b   ;00101001
 db   00010101b   ;00101010
 db   00010111b   ;00101011
 db   00010011b   ;00101100
 db   00011110b   ;00101101
 db   00011101b   ;00101110
 db   00011111b   ;00101111
 db   11000000b   ;00110000
 db   11000010b   ;00110001
 db   11000001b   ;00110010
 db   11001100b   ;00110011
 db   11001000b   ;00110100
 db   11001010b   ;00110101
 db   11001001b   ;00110110
 db   11001011b   ;00110111
 db   11000100b   ;00111000
 db   11000110b   ;00111001
 db   11000101b   ;00111010
 db   11000111b   ;00111011
 db   11000011b   ;00111100
 db   11001110b   ;00111101
 db   11001101b   ;00111110
 db   11001111b   ;00111111
 db   10000000b   ;01000000
 db   10000010b   ;01000001
 db   10000001b   ;01000010
 db   10001100b   ;01000011
 db   10001000b   ;01000100
 db   10001010b   ;01000101
 db   10001001b   ;01000110
 db   10001011b   ;01000111
 db   10000100b   ;01001000
 db   10000110b   ;01001001
 db   10000101b   ;01001010
 db   10000111b   ;01001011
 db   10000011b   ;01001100
 db   10001110b   ;01001101
 db   10001101b   ;01001110
 db   10001111b   ;01001111
 db   10100000b   ;01010000
 db   10100010b   ;01010001
 db   10100001b   ;01010010
 db   10101100b   ;01010011
 db   10101000b   ;01010100
 db   10101010b   ;01010101
 db   10101001b   ;01010110
 db   10101011b   ;01010111
 db   10100100b   ;01011000
 db   10100110b   ;01011001
 db   10100101b   ;01011010
 db   10100111b   ;01011011
 db   10100011b   ;01011100
 db   10101110b   ;01011101
 db   10101101b   ;01011110
 db   10101111b   ;01011111
 db   10010000b   ;01100000
 db   10010010b   ;01100001
 db   10010001b   ;01100010
 db   10011100b   ;01100011
 db   10011000b   ;01100100
 db   10011010b   ;01100101
 db   10011001b   ;01100110
 db   10011011b   ;01100111
 db   10010100b   ;01101000
 db   10010110b   ;01101001
 db   10010101b   ;01101010
 db   10010111b   ;01101011
 db   10010011b   ;01101100
 db   10011110b   ;01101101
 db   10011101b   ;01101110
 db   10011111b   ;01101111
 db   10110000b   ;01110000
 db   10110010b   ;01110001
 db   10110001b   ;01110010
 db   10111100b   ;01110011
 db   10111000b   ;01110100
 db   10111010b   ;01110101
 db   10111001b   ;01110110
 db   10111011b   ;01110111
 db   10110100b   ;01111000
 db   10110110b   ;01111001
 db   10110101b   ;01111010
 db   10110111b   ;01111011
 db   10110011b   ;01111100
 db   10111110b   ;01111101
 db   10111101b   ;01111110
 db   10111111b   ;01111111
 db   01000000b   ;10000000
 db   01000010b   ;10000001
 db   01000001b   ;10000010
 db   01001100b   ;10000011
 db   01001000b   ;10000100
 db   01001010b   ;10000101
 db   01001001b   ;10000110
 db   01001011b   ;10000111
 db   01000100b   ;10001000
 db   01000110b   ;10001001
 db   01000101b   ;10001010
 db   01000111b   ;10001011
 db   01000011b   ;10001100
 db   01001110b   ;10001101
 db   01001101b   ;10001110
 db   01001111b   ;10001111
 db   01100000b   ;10010000
 db   01100010b   ;10010001
 db   01100001b   ;10010010
 db   01101100b   ;10010011
 db   01101000b   ;10010100
 db   01101010b   ;10010101
 db   01101001b   ;10010110
 db   01101011b   ;10010111
 db   01100100b   ;10011000
 db   01100110b   ;10011001
 db   01100101b   ;10011010
 db   01100111b   ;10011011
 db   01100011b   ;10011100
 db   01101110b   ;10011101
 db   01101101b   ;10011110
 db   01101111b   ;10011111
 db   01010000b   ;10100000
 db   01010010b   ;10100001
 db   01010001b   ;10100010
 db   01011100b   ;10100011
 db   01011000b   ;10100100
 db   01011010b   ;10100101
 db   01011001b   ;10100110
 db   01011011b   ;10100111
 db   01010100b   ;10101000
 db   01010110b   ;10101001
 db   01010101b   ;10101010
 db   01010111b   ;10101011
 db   01010011b   ;10101100
 db   01011110b   ;10101101
 db   01011101b   ;10101110
 db   01011111b   ;10101111
 db   01110000b   ;10110000
 db   01110010b   ;10110001
 db   01110001b   ;10110010
 db   01111100b   ;10110011
 db   01111000b   ;10110100
 db   01111010b   ;10110101
 db   01111001b   ;10110110
 db   01111011b   ;10110111
 db   01110100b   ;10111000
 db   01110110b   ;10111001
 db   01110101b   ;10111010
 db   01110111b   ;10111011
 db   01110011b   ;10111100
 db   01111110b   ;10111101
 db   01111101b   ;10111110
 db   01111111b   ;10111111
 db   00110000b   ;11000000
 db   00110010b   ;11000001
 db   00110001b   ;11000010
 db   00111100b   ;11000011
 db   00111000b   ;11000100
 db   00111010b   ;11000101
 db   00111001b   ;11000110
 db   00111011b   ;11000111
 db   00110100b   ;11001000
 db   00110110b   ;11001001
 db   00110101b   ;11001010
 db   00110111b   ;11001011
 db   00110011b   ;11001100
 db   00111110b   ;11001101
 db   00111101b   ;11001110
 db   00111111b   ;11001111
 db   11100000b   ;11010000
 db   11100010b   ;11010001
 db   11100001b   ;11010010
 db   11101100b   ;11010011
 db   11101000b   ;11010100
 db   11101010b   ;11010101
 db   11101001b   ;11010110
 db   11101011b   ;11010111
 db   11100100b   ;11011000
 db   11100110b   ;11011001
 db   11100101b   ;11011010
 db   11100111b   ;11011011
 db   11100011b   ;11011100
 db   11101110b   ;11011101
 db   11101101b   ;11011110
 db   11101111b   ;11011111
 db   11010000b   ;11100000
 db   11010010b   ;11100001
 db   11010001b   ;11100010
 db   11011100b   ;11100011
 db   11011000b   ;11100100
 db   11011010b   ;11100101
 db   11011001b   ;11100110
 db   11011011b   ;11100111
 db   11010100b   ;11101000
 db   11010110b   ;11101001
 db   11010101b   ;11101010
 db   11010111b   ;11101011
 db   11010011b   ;11101100
 db   11011110b   ;11101101
 db   11011101b   ;11101110
 db   11011111b   ;11101111
 db   11110000b   ;11110000
 db   11110010b   ;11110001
 db   11110001b   ;11110010
 db   11111100b   ;11110011
 db   11111000b   ;11110100
 db   11111010b   ;11110101
 db   11111001b   ;11110110
 db   11111011b   ;11110111
 db   11110100b   ;11111000
 db   11110110b   ;11111001
 db   11110101b   ;11111010
 db   11110111b   ;11111011
 db   11110011b   ;11111100
 db   11111110b   ;11111101
 db   11111101b   ;11111110
 db   11111111b   ;11111111
 
 
 maxbyte	equ	55
 lineno	equ	23
 
 srcptr	dw	offset buffer1
 desptr	dw	offset buffer2
 
 savebuff:
 	db	maxbyte*(lineno+1) dup(0)
 	
 buffer1:
 	db	maxbyte*(lineno+1) dup(0)
 	db	256 dup(0)
 
 buffer2:
 	db	maxbyte*(lineno+1) dup(0)
 	db	256 dup(0)
 
 ;----------------------------------------------------------------------
 ;
 ;
 ;
 ;----------------------------------------------------------------------
 
 data:
 db	"                                                       "
 db	"                                                       "
 db	"                                                       "
 db	" this is a test for a lattice gas based encryption     "
 db	" algorithm. the data is encoded as particles of a      "
 db	" digital gas, whose time evolution is then simulated   "
 db	" with a cellular-automaton type algorithm. decryption  "
 db	" can be achieved by running the simulation in reverse. "
 db	" a thermodynamic argument ensures that even if a single"
 db	" bit is flipped, no decryption of the data is possible "
 db	"                                                       "
 db	" after the gas is let to evolve for 256 timesteps,     "
 db	" one can either run the reverse evolution by pressing  "
 db	" space, or flip a bit and then run by pressing '0'     "
 db	"                                                       "
 db	" for a cryptographic application, the key would consist"
 db	" of the number of time steps and the time and location "
 db	" of specific bit inversions.                           "
 db	"                                                       "
 db	"                                                       "
 db	"                                                       "
 db	"                                                       "
 db	"                                                       "
 
 ;
 ; fill the gas with a piece of code
 ;
 initgas:
 	mov	di,cs:srcptr
 	mov	si,offset data
 
 	mov	cx,lineno
 ig0:
 	push	di
 	push	cx
 	mov	cx,maxbyte
 ig1:
 	mov	al,cs:[si]
 	mov	cs:[di],al
 	inc	si
 	inc	di
 	loop	ig1
 	pop	cx
 	pop	di
 	add	di,maxbyte
 	loop	ig0
 	mov	si,cs:srcptr
 	mov	di,offset initgas
 	mov	cx,maxbyte*3
 	mov	al,0
 lg2:
 	mov	byte ptr cs:[si],al
 	not	al
 	inc	si
 	loop	lg2
 	ret
 
 ;----------------------------------------------------------------------
 ;
 ; display gas molecules bouncing around
 ;
 showgas:
 	push	es
 	push	si
 	push	di
 	push	cx
 	push	bx
 
 	mov	ax,0b800h
 	mov	es,ax
 	mov	si,cs:srcptr
 	mov	di,160*2+10*2
 	mov	cx,lineno-3
 	add	si,maxbyte*3
 sg1:
 	push	cx
 	push	di
 
 	mov	cx,maxbyte
 sg2:
 	mov	al,cs:[si]
 	mov	byte ptr es:[di],al
 	inc	si
 	add	di,2
 	dec	cx
 	jnz	sg2
 
 	pop	di
 	pop	cx
 	add	di,160
 	loop	sg1
 	
 	pop	bx
 	pop	cx
 	pop	di
 	pop	si
 	pop	es
 	ret
 
 ;----------------------------------------------------------------------
 ;
 ; cs:si 	->	sourse of data
 ; cs:di		->	destination of data
 ;
 scanonemiddleline:
 ;
 ; first byte is a special case because of warparound
 ;
 	mov	bl,0			; al is the "assembled" byte.
 	mov	bh,cs:[si-maxbyte]	; north is one line "up" (lower)
 	and	bh,10001000b		; and at bits 7 and 3
 	or	bl,bh			; or them into the assembled byte
 	mov	bh,cs:[si+maxbyte]	; south is one line "down" (higher)
 	and	bh,01000100b		; and at bits 6 and 2
 	or	bl,bh			; place the stuff into al
 	mov	bh,cs:[si+(maxbyte-1)]	; west is one byte "left" (lower)
 	and	bh,00100010b		; and at bits 5 and 1
 	or	bl,bh
 	mov	bh,cs:[si+1]		; east is one byte "right" (higher)
 	and	bh,00010001b		; and at bits 4 and 0
 	or	bl,bh
 	mov	bh,0
 	mov	al,byte ptr cs:[bx + offset hpprule]
 	mov	cs:[di],al
 	inc	si
 	inc	di
 ;
 ; middle bytes can be handled in a loop 
 ;
 	mov	cx,maxbyte-2
 sol1:
 	mov	bl,0			; al is the "assembled" byte.
 	mov	bh,cs:[si-maxbyte]	; north is one line "up" (lower)
 	and	bh,10001000b		; and at bits 7 and 3
 	or	bl,bh			; or them into the assembled byte
 	mov	bh,cs:[si+maxbyte]	; south is one line "down" (higher)
 	and	bh,01000100b		; and at bits 6 and 2
 	or	bl,bh			; place the stuff into al
 	mov	bh,cs:[si-1]		; west is one byte "left" (lower)
 	and	bh,00100010b		; and at bits 5 and 1
 	or	bl,bh
 	mov	bh,cs:[si+1]		; east is one byte "right" (higher)
 	and	bh,00010001b		; and at bits 4 and 0
 	or	bl,bh
 	mov	bh,0
 	mov	al,byte ptr cs:[bx + offset hpprule]
 	mov	cs:[di],al
 	inc	si
 	inc	di
 	loop	sol1
 ;
 ; last byte is also special
 ;
 	mov	bl,0			; al is the "assembled" byte.
 	mov	bh,cs:[si-maxbyte]	; north is one line "up" (lower)
 	and	bh,10001000b		; and at bits 7 and 3
 	or	bl,bh			; or them into the assembled byte
 	mov	bh,cs:[si+maxbyte]	; south is one line "down" (higher)
 	and	bh,01000100b		; and at bits 6 and 2
 	or	bl,bh			; place the stuff into al
 	mov	bh,cs:[si-1]		; west is one byte "left" (lower)
 	and	bh,00100010b		; and at bits 5 and 1
 	or	bl,bh
 	mov	bh,cs:[si-(maxbyte-1)]	; east is one byte "right" (higher)
 	and	bh,00010001b		; and at bits 4 and 0
 	or	bl,bh
 	mov	bh,0
 	mov	al,byte ptr cs:[bx + offset hpprule]
 	mov	cs:[di],al
 	inc	si
 	inc	di
 	ret
 
 
 ;----------------------------------------------------------------------
 ;
 ; cs:si 	->	sourse of data
 ; cs:di		->	destination of data
 ;
 scanfirstline:
 ;
 ; first byte is a special case because of warparound
 ;
 	mov	bl,0				
 	mov	bh,cs:[si+maxbyte*(lineno-1)]	
 	and	bh,10001000b		; and at bits 7 and 3
 	or	bl,bh			; or them into the assembled byte
 	mov	bh,cs:[si+maxbyte]
 	and	bh,01000100b		; and at bits 6 and 2
 	or	bl,bh			; place the stuff into al
 	mov	bh,cs:[si+maxbyte-1]	; west is one byte "left" (lower)
 	and	bh,00100010b		; and at bits 5 and 1
 	or	bl,bh
 	mov	bh,cs:[si+1]		; east is one byte "right" (higher)
 	and	bh,00010001b		; and at bits 4 and 0
 	or	bl,bh
 	mov	bh,0
 	mov	al,byte ptr cs:[bx + offset hpprule]
 	mov	cs:[di],al
 	inc	si
 	inc	di
 ;
 ; middle bytes can be handled in a loop 
 ;
 	mov	cx,maxbyte-2
 sfl1:
 	mov	bl,0			; al is the "assembled" byte.
 	mov	bh,cs:[si+maxbyte*(lineno-1)]
 	and	bh,10001000b		; and at bits 7 and 3
 	or	bl,bh			; or them into the assembled byte
 	mov	bh,cs:[si+maxbyte]
 	and	bh,01000100b		; and at bits 6 and 2
 	or	bl,bh			; place the stuff into al
 	mov	bh,cs:[si-1]		; west is one byte "left" (lower)
 	and	bh,00100010b		; and at bits 5 and 1
 	or	bl,bh
 	mov	bh,cs:[si+1]		; east is one byte "right" (higher)
 	and	bh,00010001b		; and at bits 4 and 0
 	or	bl,bh
 	mov	bh,0
 	mov	al,byte ptr cs:[bx + offset hpprule]
 	mov	cs:[di],al
 	inc	si
 	inc	di
 	loop	sfl1
 ;
 ; last byte is also special
 ;
 	mov	bl,0			; al is the "assembled" byte.
 	mov	bh,cs:[si+maxbyte*(lineno-1)]
 	and	bh,10001000b		; and at bits 7 and 3
 	or	bl,bh			; or them into the assembled byte
 	mov	bh,cs:[si+maxbyte]
 	and	bh,01000100b		; and at bits 6 and 2
 	or	bl,bh			; place the stuff into al
 	mov	bh,cs:[si-1]		; west is one byte "left" (lower)
 	and	bh,00100010b		; and at bits 5 and 1
 	or	bl,bh
 	mov	bh,cs:[si-(maxbyte-1)]	; east is one byte "right" (higher)
 	and	bh,00010001b		; and at bits 4 and 0
 	or	bl,bh
 	mov	bh,0
 	mov	al,byte ptr cs:[bx + offset hpprule]
 	mov	cs:[di],al
 	ret
 
 
 ;----------------------------------------------------------------------
 ;
 ; cs:si 	->	sourse of data
 ; cs:di		->	destination of data
 ;
 scanlastline:
 ;
 ; first byte is a special case because of warparound
 ;
 	mov	bl,0			; al is the "assembled" byte.
 	mov	bh,cs:[si-maxbyte]
 	and	bh,10001000b		; and at bits 7 and 3
 	or	bl,bh			; or them into the assembled byte
 	mov	bh,cs:[si-maxbyte*(lineno-1)]
 	and	bh,01000100b		; and at bits 6 and 2
 	or	bl,bh			; place the stuff into al
 	mov	bh,cs:[si+(maxbyte-1)]	; west is one byte "left" (lower)
 	and	bh,00100010b		; and at bits 5 and 1
 	or	bl,bh
 	mov	bh,cs:[si+1]		; east is one byte "right" (higher)
 	and	bh,00010001b		; and at bits 4 and 0
 	or	bl,bh
 	mov	bh,0
 	mov	al,byte ptr cs:[bx + offset hpprule]
 	mov	cs:[di],al
 	inc	si
 	inc	di
 ;
 ; middle bytes can be handled in a loop 
 ;
 	mov	cx,maxbyte-2
 sll1:
 	mov	bl,0			; al is the "assembled" byte.
 	mov	bh,cs:[si-maxbyte]
 	and	bh,10001000b		; and at bits 7 and 3
 	or	bl,bh			; or them into the assembled byte
 	mov	bh,cs:[si-maxbyte*(lineno-1)]
 	and	bh,01000100b		; and at bits 6 and 2
 	or	bl,bh			; place the stuff into al
 	mov	bh,cs:[si-1]		; west is one byte "left" (lower)
 	and	bh,00100010b		; and at bits 5 and 1
 	or	bl,bh
 	mov	bh,cs:[si+1]		; east is one byte "right" (higher)
 	and	bh,00010001b		; and at bits 4 and 0
 	or	bl,bh
 	mov	bh,0
 	mov	al,byte ptr cs:[bx + offset hpprule]
 	mov	cs:[di],al
 	inc	si
 	inc	di
 	loop	sll1
 ;
 ; last byte is also special
 ;
 	mov	bl,0			; al is the "assembled" byte.
 	mov	bh,cs:[si-maxbyte]
 	and	bh,10001000b		; and at bits 7 and 3
 	or	bl,bh			; or them into the assembled byte
 	mov	bh,cs:[si-maxbyte*(lineno-1)]
 	and	bh,01000100b		; and at bits 6 and 2
 	or	bl,bh			; place the stuff into al
 	mov	bh,cs:[si-1]		; west is one byte "left" (lower)
 	and	bh,00100010b		; and at bits 5 and 1
 	or	bl,bh
 	mov	bh,cs:[si-(maxbyte-1)]	; east is one byte "right" (higher)
 	and	bh,00010001b		; and at bits 4 and 0
 	or	bl,bh
 	mov	bh,0
 	mov	al,byte ptr cs:[bx + offset hpprule]
 	mov	cs:[di],al
 	inc	si
 	inc	di
 	ret
 
 
 
 ;----------------------------------------------------------------------
 ;
 ; invert all velocities in the gas
 ;
 invertall:
 	push	bx
 	push	cx
 	push	si
 	mov	si,cs:srcptr
 	mov	bx,0
 	mov	cx,lineno
 ia1:
 	push	cx
 	mov	cx,maxbyte
 ia2:
 	mov	bl,cs:[si]
 	mov	al,byte ptr cs:[bx + (offset wallrule)]
 	mov	cs:[si],al
 	inc	si
 	loop	ia2
 	pop	cx
 	loop	ia1
 	pop	si
 	pop	cx
 	pop	bx
 	ret
 
 ;----------------------------------------------------------------------
 ; 
 ;
 iterateonce:
 	mov	si,cs:srcptr
 	mov	di,cs:desptr
 	mov	cs:srcptr,di
 	mov	cs:desptr,si
 
 	push	si
 	push	di
 	call	scanfirstline
 	pop	di
 	pop	si
 	add	si,maxbyte
 	add	di,maxbyte	
 	mov	cx,lineno-2		; dont scan first and last
 l1:
 	push	si
 	push	di
 	push	cx
 	call	scanonemiddleline
 	pop	cx
 	pop	di
 	pop	si
 	add	si,maxbyte
 	add	di,maxbyte
 	loop	l1
 
 	push	si
 	push	di
 	call	scanlastline
 	pop	si
 	pop	di
 l3:
 	ret
 
 ;----------------------------------------------------------------------
 ;
 ; iterate hpp rule cx times
 ;
 iterate:
 	push	cx
 	call	iterateonce
 	pop	cx
 	call	showgas
 	loop	iterate
 	ret
 
 ;----------------------------------------------------------------------
 ;
 ; iterate hpp rule cx times
 ;
 iterateuntil:	
 	mov	si,0
 	mov	cx,offset iu4 - offset iu3
 iu00:
 	mov	al,byte ptr cs:[si + offset iu3]
 	xor	byte ptr cs:[si + offset iu4],al
 	inc	si
 	loop	iu00
 iu0:
 	call	iterateonce
 	call	showgas
 	mov	si,cs:srcptr
 	mov	cx,maxbyte*3
 	mov	bx,0
 	mov	ah,0
 	mov	al,255
 iu1:
 	mov	bl,byte ptr cs:[si]
 	mov	dl,byte ptr cs:[bx+wallrule]
 	not	ah
 	xor	dl,ah
 	and	al,dl
 	inc	si
 	loop	iu1
 	mov	si,0
 	mov	cx,offset iu4 - offset iu3
 iu2:
 	mov	ah,byte ptr cs:[si+offset iu4]
 	and	ah,al
 	xor	byte ptr cs:[si+offset iu3],ah
 	inc	si
 	loop	iu2
 	jmp	iu3
 iu3:
 	mov	ax,offset iu0
 	push	ax
 	ret
 	db	256 dup(90h)
 iu4:
 	push	ax
 	push	bx
 	push	cx
 	push	dx
 	push	ds
 
 	mov	ah,9
 	mov	dx,cs:msgptr
 	int	21h
 
 	pop	ds
 	pop	dx
 	pop	cx
 	pop	bx
 	pop	ax
 	ret
 
 	db	512 dup(90h)
 
 msgptr	dw	offset msg
 msg	db	"this message is printed out by",10,13
 	db	"code decrypted using data from the lattice",10,13
 	db	"which was applied to the decoding routine",10,13
 	db	"after every time step",10,13
 	db	"the decoding function left the code unchanged",10,13
 	db	"except after the gas evolution had completelly",10,13
 	db	"reversed the thermalization",10,13,"$"
 
 
 times	equ	16		; 256 repetitions are enough to
 				; "equilibrate" the gas
 
 begin:
 	mov	ax,0600h
 	mov	bh,7
 	mov	dh,25
 	mov	dl,80
 	mov	cx,0
 	int	10h
 
 	mov	ah,2
 	mov	bh,0
 	mov	dh,24
 	mov	dl,0
 	int	10h
 
 	call	initgas
 	call	showgas
 	mov	ah,0
 	int	16h
 	push	cx
 	mov	cx,times
 	call	iterate
 	call	invertall
 	call	showgas
 	mov	ah,0
 	int	16h
 	cmp	al,"0"
 	jne	begin0
 	mov	si,cs:srcptr
 	xor	byte ptr cs:[si],10000001b
 begin0:
 	mov	cx,times
 	call	iterateuntil
 	call	invertall
 	call	showgas
 	mov	ax,4c00h
 	int	21h
 	
 
 code	ends
 	end	start
 
 