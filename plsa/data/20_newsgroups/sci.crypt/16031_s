
 in article <1993apr24.160121.17189@ulysses.att.com>, smb@research.att.com (steven bellovin) writes:
 [...]
 > there are three issues with clipper.  the first is whether or not the
 > architecture of the whole scheme is capable of working.  my answer,
 > with one significant exception, is yes.  i really do think that nsa and
 > nist have designed this scheme about as well as can be, assuming that
 > their real objectives are as stated: to permit wiretapping, under
 > certain carefully-controlled circumstances, with a minimum risk of
 > abuse.  (the exception is that u exists outside of the chip, on a
 > programming diskette.  that's seriously wrong.  u_1 and u_2 should be
 > loaded onto the chip separately.)  to those who disagree (and i don't
 > claim my answer is obvious, though i found my own reasoning
 > sufficiently persuasive that i was forced to rewrite the conclusions
 > section of my technical analysis paper -- i had originally blasted the
 > scheme), i issue this invitation:  assume that you were charged with
 > implementing such a system, with complete regard for civil rights and
 > due process.  what would you do differently?  in answering this
 > question, please accept nsa's fundamental assumptions:  that both
 > strong cryptography against outsiders, and the ability to wiretap
 > *some* domestic users, is necessary.  (if you feel it necessary to
 > challenge those assumptions, do it in the context of the last issue i
 > present below.  right here, i'm discussing *just* the technical
 > aspects.  and no, i don't by any means claim that just because
 > something can be done, it should be.)
 
 ok steve, here's a sketch of an alternative that i believe addresses
 most of the objections to the clipper scheme.
 
 notation:
 	+	concatenation
 	^	exclusive or
 	e(m,k)	message m encrypted by key k
 	d(m,k)	message m decrypted by key k
 	h(m)	hash (digest/signature) of message m
 
 important values:
 	u0[x]		local chip unit key from escrow agency x
 	u1[x]		remote chip unit key from escrow agency x
 	n[0]		serial number of the local chip
 	n[1]		serial number of the remote chip
 	a		number of escrow agencies
 	k[0],k[1]	"session keys" agreed upon external to this protocol
 	f		"family key", need not be secret
 
 protocol:
 	choose k0[1],...k0[a] such that k[0] = k0[1]^...^k0[a]
 	remote chip does same for k[1],k1[1],...,k1[a].
 
 	compute the following:
 
 		l0[1] = e(k0[1], u0[1])
 		...
 		l0[a] = e(k0[a], u0[a])
 
 		l[0] = n[0] + e(n[0] + l0[1] + ... + l0[a], f)
 
 		remote chip does the same for l1[1],...,l1[a],l[1]
 
 	send l[0] to remote chip and receive l[1] from remote chip
 
 	compute:
 
 		ke[0] = h(k[0] + n[0] + l0[1] + ... + l0[a]
 			+ k[1] + d(l[1], f)
 
 		kd[0] = h(k[1] + d(l[1], f)
 			+ k[0] + n[0] + l0[1] + ... + l0[a]
 
 		note that d(l[1], f) = n[1] + l1[1] + ... + l1[a]
 
 		remote chip does the same for ke[1] and kd[1]
 
 	user data is encrypted (decrypted) with keys ke[0], ke[1]
 		(kd[0], kd[1])
 
 assumptions:
 	no trap doors in e(), d() and h(). h() is not invertible.
 
 	algorithms for e(), d() and h() are secret. otherwise a software
 	implementation (bogus chip) could communicate with a real chip.
 
 	the chip only supports the following operation:
 
 		1)  return n[0]
 		2)  load k0[x]
 		3)  return e(k0[x], u0[x])
 		4)  return e(n[0] + l0[1] + ... + l0[a], f)
 		5)  given e(n[1] + l1[1] + ... + l1[a], f),
 			return n[1],l1[1],...,l1[a]
 		6)  load k[1]
 		7)  given e(n[1] + l1[1] + ... + l1[a], f),
 			compute ke[0], kd[0]
 		8)  given m, return e(m, ke[0])
 		9)  given m, return d(m, kd[0])
 
 	anything programmed into the chip can be determined by destroying
 	the chip (u[1],...,u[a],f,n[0]).
 
 	u[1],...,u[a] can not be determined except by destroying the chip.
 	(unfortunately this may not be true in reality. i suppose it's
 	possible to determine how a chip has been programmed with a
 	sophisticated[sp?] x-ray machine to look for blown fuses.)
 
 	the u's are programmed independantly by the escrow agencies.
 
 notes:
 	for tapping escrow agency y is given n[0], e(k0[y], u0[y]), n[1],
 	e(k1[y], u1[y]) and returns k0[y], k1[y].
 
 	lea's must contact all escrow agencies with the serial numbers from
 	both chips and the encrypted partial keys. this allows the agencies
 	to record that both chips were tapped.
 
 	lea's only get the session key, not the key to all conversations
 	of a particular chip. this precludes real-time decrypting of a
 	conversation but that isn't one of the stated requirements.
 
 observation:
 	in order for any secure by "tap-able" communication scheme to work,
 	the active parts need to share a secret. and if this secret is
 	revealed, communications by those that know the secret can be made
 	"un-tap-able". obvious candidates are the cryptographic algorithm
 	and the master (family) key. relative size and complexity suggests
 	that the key can be obtained from a silicon implementation of the
 	scheme a lot easier and faster than the algorithm.
 
 
 						rsbx
 
 -----------------------------------------------------------------------------
 raymond s. brand					rbrand@usasoc.soc.mil
 -----------------------------------------------------------------------------
 