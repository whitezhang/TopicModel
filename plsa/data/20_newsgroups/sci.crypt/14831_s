
 archive-name: ripem/faq
 last-update: 31 mar 93 22:00:00 -0500
 
 about this posting
 ------------------
 this is a listing of likely questions and information about ripem, a
 program for public key mail encryption.  it (this faq, not ripem) was
 written and will be maintained by marc vanheyningen
 <mvanheyn@cs.indiana.edu>.  it will be posted to a variety of
 newsgroups on a monthly basis; follow-up discussion specific to ripem
 is redirected to the group alt.security.ripem.
 
 what's new
 ----------
 i am now running a world wide web archive of ripem information.  it
 does not contain much of anything that isn't available elsewhere, but
 it has convenient pointers to the most current version of this faq and
 some other stuff.  the url is "http://cs.indiana.edu/ripem/dir.html".
 
 this month's version has a fair amount of new pointers to information
 on patents and stuff like that.  i've also reordered a few things to
 have a more sensible ordering.  i hope i don't have to edit this again
 soon. :-)
 
 disclaimer
 ----------
 nothing in this faq should be considered legal advice, or anything
 other than one layperson's opinion.  if you want real legal advice,
 talk to a real lawyer, preferably one with experience in patent law,
 export regulations, or whatever area of law is in question.
 
 list of questions
 -----------------
 1)  what is ripem?
 2)  how can i get ripem?
 3)  will ripem run on my machine?
 4)  will ripem work with my mailer?
 5)  what is rsa?
 6)  what is des?
 7)  what is a fingerprint, like md5?
 8)  what is pem?
 9)  what's this about distributing and authenticating keys?
 10)  isn't it a bad idea to use patented algorithms in standards like pem?
 11)  what about rsadsi/pkp?
 12)  why do all ripem public keys look very similar?
 13)  what is pgp?
 14)  what about rpem?
 15)  what is mime?
 16)  what is tis/pem?
 17)  i have this simple way to defeat the security of ripem...
 
 questions and answers
 ---------------------
 
 1)  what is ripem?
 
  ripem is a (not yet complete, but useful) implementation of privacy
  enhanced mail (pem).  ripem allows your electronic mail to have the
  four security facilities provided by pem: disclosure protection
  (optional), originator authenticity, message integrity measures, and
  non-repudiation of origin (always).  (see: "what is pem?")
 
  ripem was written primarily by mark riordan <mrr@scss3.cl.msu.edu>.
  most of the code is in the public domain, except for the rsa routines,
  which are a library called rsaref licensed from rsa data security inc.
 
  the current version of ripem is 1.0.5; the current version of the
  macintosh port of ripem is 0.7.
 
 2)  how can i get ripem?
 
  ripem uses the library of cryptographic routines rsaref, which is
  considered munitions and thus is export-restricted from distribution
  to persons who are not citizens or permanent residents in the u.s or
  canada without an export license.  no such license has been obtained
  (nor would one likely be granted unless the rsa key exchange were
  shortened to 512 bits and the symmetric cipher changed to something
  weaker than des.  there are some suggestions that this situation may
  change now that clinton is in office.)  the author requests in the
  readme file that this law not be violated:
 
  #please do not export the cryptographic code in this distribution
  #outside of the usa or canada.  this is a personal request from me,
  #the author of ripem, and a condition of your use of ripem.
 
  note that rsaref is not in the public domain, and a license for it is
  included with the distribution.  you should read it before using
  ripem.
 
  ripem is available via anonymous ftp to citizens and permanent
  residents in the u.s. from rsa.com; cd to rsaref/ and read the readme
  file for info.  note that the non-rsaref portion of ripem is not a
  product of rsa data security, incorporated; they merely are helping
  distribute it.
 
  ripem, as well as some other crypt stuff, has its "home site" on
  ripem.msu.edu, which is open to non-anonymous ftp for users in the
  u.s. and canada who are citizens or permanent residents.  to find out
  how to obtain access, ftp there, cd to pub/crypt/, and read the file
  getting_access.  for convenience, binaries for many architectures are
  available here in addition to the full source tree.
 
 3)  will ripem run on my machine?
 
  probably.  it has already been ported to ms-dos and most flavors of
  unix (sunos, next, linux, aix, ultrix, solaris, etc.)  ports to
  macintosh include a standard unix-style port and a rather nice
  mac-like port written by raymond lau, author of stuffit.  more ports
  are expected, and help of users is invited.
 
 4)  will ripem work with my mailer?
 
  probably.  how easy and clean the effective interface is will depend
  on the sophistication and modularity of the mailer, though.  the users
  guide, included with the distribution, discusses ways to use ripem
  with many popular mailers, including berkeley, mush, elm, and mh.
  code is also included in elisp to allow easy use of ripem inside gnu
  emacs.
 
  if you make a new interface for ripem or create an improvement on one
  in the distribution which you believe is convenient to use, secure,
  and may be useful to others, feel free to post it to alt.security.ripem.
 
 5)  what is rsa?
 
  rsa is a crypto system which is asymmetric, or public-key.  this means
  that there are two different, related keys: one to encrypt and one to
  decrypt.  because one cannot (reasonably) be derived from the other,
  you may publish your encryption, or public, key widely and keep your
  decryption, or private, key to yourself.  anyone can use your public
  key to encrypt a message, but only you hold the private key needed to
  decrypt it.  note that the "message" sent with rsa is normally just
  the des key to the real plaintext. (see "what is des?")
 
  note that the above only provides for disclosure protection.  for
  originator authenticity, message integrity, and non-repudiation of
  origin services to be implemented, the fingerprint of the message
  (see "what is a fingerprint, like md5?") is encrypted with the
  sender's private key.  the recipient, or a dispute-resolving
  authority, can use the sender's public key to decrypt it and confirm
  that the message must have come from the sender and was not altered.
 
  rsa was named for the three men (rivest, shamir and adleman) who
  invented it.  to find out lots more about rsa and modern cryptography
  in general, ftp to rsa.com and look in pub/faq/.  some information
  also may be in sci.crypt.
 
 6)  what is des?
 
  des is the data encryption standard, a widely used symmetric, or
  secret-key, crypto system.  unlike rsa, des uses the same key to
  encrypt and decrypt messages.  however, des is much faster than rsa.
 
  ripem uses both des and rsa; it generates a random key and encrypts
  your mail with des using that key.  it then encrypts that key with the
  recipient's public rsa key and includes the result in the letter,
  allowing the recipient to recover the des key.
 
  des is sometimes considered weak because it is somewhat old and uses a
  key length considered too short by modern standards.  however, it
  should be reasonably safe against an opponent smaller than a large
  corporation or government agency.  it is not likely that the pem
  standard will incorporate support for other symmetric ciphers in the
  near future, because there is a strong feeling that pem should be
  stable so it can become utilized widely without early problems with
  interoperability.
 
 7)  what is a fingerprint, like md5?
 
  md5 is a message digest algorithm produced by rsa data security inc.
  it provides a 128-bit fingerprint, or cryptographically secure hash,
  of the plaintext.  it is cryptographically secure because it is not
  possible (in a reasonable amount of computation) to produce a
  different plaintext which produces the same fingerprint.  thus,
  instead of signing the entire message with the sender's private key,
  only the md5 of the message needs to be signed for authentication.
 
  md5s can also be exchanged directly for authentication; for example,
  ripem public keys include an md5 of the public key in the file, so
  parties wishing to confirm their keys are authentic via a separate
  channel merely need exchange md5s of keys and verify their accuracy.
 
  md5 is sometimes used for other purposes; for example, it is often
  used to map an input of arbitrary length to 128 bits of data, as a
  passphrase interpreter or cookie generator.
 
  md5 is described in its entirety (including an implementation in c) in
  rfc 1321.
 
  there have been some recent suggestions that md5 may not be as strong
  a hash as was originally believed; presumably some other hash
  function will be used if this is accepted as true.
 
 8)  what is pem?
 
  pem is privacy enhanced mail, a standard for allowing transfer of
  encrypted electronic mail generated over a long period of time by a
  working group of experts.  it is described in rfcs 1421-1424; these
  documents have been approved and obsolete the old rfcs 1113-1115.
 
  ripem is not really a complete implementation of pem, because pem
  specifies certificates for authenticating keys, which ripem does not
  handle at this time.  their addition is planned.
 
 9)  what's this about distributing and authenticating keys?
 
  for a remote user to be able to send secure mail to you, she must know
  your public key.  for you to be able to confirm that the message
  received came from her, you must know her public key.  it is important
  that this information be accurate; if a "bad guy" convinces her that
  his key is in fact yours, she will send messages which he can read.
 
  ripem allows for three methods of key management: a central server,
  the distributed finger servers, and a flat file.  all three are
  described in the ripem users guide which is part of the distribution.
  none of them provide perfect security.  the pem standard calls for
  key management by certificates; the addition of this feature to ripem
  is planned, but chicken-egg issues still exist.
 
 10)  isn't it a bad idea to use patented algorithms in standards like pem?
 
  this issue has been considered in the standards process.  rfc 1310,
  the specification for internet standards, has a discussion (section
  6) on what specifications for nondiscriminatory availability must be
  met for a patented method to be included in a standard.  rfc 1421
  addresses this issue with regard to the patents covering public-key
  cryptography.
 
  this does not, of course, mean that all questions are settled or that
  everyone is in agreement.  an interesting exchange on the use of
  patented algorithms in standards with regard to public-key
  cryptography is in the league for programming freedom archive
  (available via ftp: ftp.uu.net:/doc/lpf) in the files bidzos.letter
  and bidzos.response.  (amusingly, the lpf files on ftp.uu.net are
  compressed with a patented algorithm.)
 
 11)  what about rsadsi/pkp?
 
  rsa data security, inc. (rsadsi) is a california-based company
  specializing in cryptographic technologies.  public key partners is a
  firm which holds exclusive sub-licensing rights of the following u.s.
  patents and all of their corresponding foreign patents:
 
       cryptographic apparatus and method
       ("diffie-hellman")............................... no. 4,200,770
 
       public key cryptographic apparatus
       and method ("hellman-merkle").................... no. 4,218,582
 
       cryptographic communications system and
       method ("rsa")................................... no. 4,405,829
 
       exponential cryptographic apparatus
       and method ("hellman-pohlig").................... no. 4,424,414
 
  pkp claims these four patents cover all known methods of public key
  cryptography.  the two businesses are rather closely related (for
  example, the same person, jim bidzos, is president of both of them.)
  pkp has licensed this technology to a considerable number of
  companies (ibm, dec, motorola, at&t, lotus...) for use in their
  products.  pkp has also threatened and filed lawsuits defending their
  patents.
 
  ripem was originally created with no connection to rsadsi other than
  its use of the rsaref library, and for no reason other than its
  author's desire to see widespread use of public-key cryptography.
  however, after the ball started rolling, people at rsadsi got
  interested.  rsadsi decided to carry ripem on its ftp site, and some
  people there started making their own ripem keys and contributing
  code.  ripem even won the "best application built on rsaref in 1992"
  award.
 
 12)  why do all ripem public keys look very similar?
 
  ripem public keys begin with a pkcs (public-key cryptography
  standards) identifier describing various characteristics about the
  key, so the first bunch of characters in your key may be the same as
  those of lots of other people's keys.  this does not mean your keys
  are similar, but only that they are the same class of key, were
  generated with the same program, are of the same length, etc.
 
 13)  what is pgp?
 
  pgp is another cryptographic mail program called pretty good privacy.
  pgp has been around longer than ripem, and works somewhat differently.
  pgp is not compatible with ripem in any way, though pgp does also use rsa.
 
  a few major differences between pgp and ripem:
 
  - pgp has more key management features, particularly for users without
    a direct network connection.
 
  - ripem conforms to the pem rfcs and thus has a greater probability
    of working with other pem software.  pgp makes no attempt to be
    compatible with anything other than itself.
 
  - ripem uses rsaref, a library of rsa routines from rsadsi which
    comes with a license allowing noncommercial use.  pgp uses its own
    implementation of rsa.  pkp claims that it is a violation of its
    patents to "make, use or sell" pgp in the u.s. or canada without
    either a license or written permission.  (see: "disclaimer")
    (see: "what about rsadsi/pkp?")  phil zimmermann, the author of
    pgp, stopped distributing it after being threatened with legal
    action; he believed that a licensing scheme could be arranged, but
    it hasn't happened and there seems little prospect of it happening
    in the future.  he acknowledges in the pgp user's guide:
 
    #in fact, if you live in the usa, and you are not a federal agency, 
    #you shouldn't actually run pgp on your computer, because public
    #key partners wants to forbid you from running my software.  pgp is
    #contraband.
 
  - both pgp and ripem are export-restricted, and cannot be sent outside
    the u.s. and canada without an export license.  however, pgp
    already exists on many ftp sites in europe and other places.
 
  whether you use pgp or ripem or whatever, the documentation to pgp is
  recommended reading to anyone interested in such issues.
  unfortunately, it's not distributed separately from the program,
  which can be difficult to find in the u.s. on ftp sites due to
  liability concerns.
 
 14)  what about rpem?
 
  rpem stands for rabin privacy enhanced mail.  it was similar to ripem,
  but used a public-key cipher invented by rabin (which is not rsa) in
  an attempt to avoid the patents on public-key systems.  it was
  written by mark riordan, who later wrote ripem.
 
  its distribution was halted when, contrary to the beliefs of many
  (including rabin), pkp claimed that their patents were broad enough
  to cover the cipher employed.  this claim is not universally
  accepted, but was not challenged for pragmatic reasons.
 
  rpem is not really used anymore.  it is not compatible with ripem or pgp.
 
 15)  what is mime?
 
  mime stands for multipurpose internet mail extensions, and is
  described in rfc 1341.  you can find out about it in the newsgroup
  comp.mail.mime; a faq exists on it.  how pem should interact with
  mime is not yet entirely clear; some people use the stopgap solution
  of having a mime type application/x-ripem in order to send ripem
  messages as mime ones.  i hope some standards will emerge.  draft
  internet documents exist on the matter.
 
 16)  what is tis/pem?
 
  trusted information systems is working on a version of privacy
  enhanced mail for general availability.  last i heard, it was
  rumored to be integrated into an existing mail user agent (mh)
  rather than a stand-alone system, and in beta test.  i don't know
  much more than that.
 
 17)  i have this simple way to defeat the security of ripem...
 
  you may wish to check the companion post "ripem-attacks" which
  discusses some of the more obvious attacks on ripem's security and
  what procedures will minimize the risk.  ripem's main "weak area" is
  probably key distribution.
 