
 in article <2bb29f4c@mash.boulder.co.us: rmashlan%mash@csn.org (robert mashlan) writes:
 :tarnold@vnet.ibm.com (todd w. arnold) said in article <19930322.101356.617@almaden.ibm.com>:
 :>it's ok as long as you trust the end-user to stay out of your application
 :>program - or as long as it runs in a system where the user can't get to it.
 :>otherwise, you can't stop him from finding the "load a module" code in your
 :>program, and simply bypassing the check for a valid module.  the devious user
 :>can either modify the object code before running the program, or he can run
 :>the program under a debugger and change the instructions in memory.
 :there is a way to foil debuggers, by clearing the single step 
 :interrupt, on which a debugger depends, every few instructions in 
 :the sensitive areas of the code.
 
 this assumes the person is using the hardware debug instruction of an x86
 type processor.  it can be negated by nop'ing the clear debug instruction,
 or by running the code on a machine simulator, like one i wrote as a senior
 project in college.  it can bypass and trace practically anything one could
 write in software.  kind of like being on a star trek holideck :-).
 
 -- 
 kenneth ng
 please reply to ken@eies2.njit.edu for now.
 "all this might be an elaborate simulation running in a little device sitting
 on someone's table" -- j.l. picard: st:tng
 