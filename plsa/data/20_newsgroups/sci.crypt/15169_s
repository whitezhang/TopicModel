
 in article <c5ja6s.a59@cs.psu.edu> so@eiffel.cs.psu.edu (nicol c so) writes:
 >in article <897@pivot.sbi.com> bet@sbi.com (bennett todd @ salomon brothers inc., ny ) writes:
 >>this came up because i decided to configure up mit-magic-cookie-1 security
 >>for x11r5. for this to work you need to stick some bits that an intruder
 >>can't guess in a file (readable only by you) which x client applications
 >>read. they pass the bits back to the server when they want to establish a
 >>connection.
 >>
 >>...
 >>what i settled on was grabbing a bunch of traffic off the network.
 >>basically, i ran
 >>
 >>	etherfind -u -x greater 0|compress
 >>
 >>and skipped over 10k of output, then grabbed my bits. as best i can tell,
 >>these are bits that can be expected to be reasonably uniformly distributed,
 >>and quite unguessable by an intruder.
 >
 >for your application, what you can do is to encrypt the real-time clock
 >value with a secret key.
 
 for a good discussion of cryptographically "good" random number
 generators, check out the draft-ietf-security-randomness-00.txt
 internet draft, available at your local friendly internet drafts
 repository. 
 
 a reasonably source of randomness is the output of a cryptographic
 hash function (e.g., md5), when fed with a large amount of
 more-or-less random data. for example, running md5 on /dev/mem is a
 slow, but random enough, source of random bits; there are bound to be
 128 bits of entropy in the tens (or hundreds) of megabytes of data in
 a modern workstation's memory, as a fair amount of them are system
 timers, i/o buffers, etc.
 
 /ji
 