
 in <c622a1.7t6@demon.co.uk> graham toal <gtoal@gtoal.com> writes:
 >in article <1regq0innn7u@gap.caltech.edu> hal@cco.caltech.edu (hal finney) writes:
 >:i tried this code yesterday.  on my sparcstation elc it takes over
 >:300 seconds to compress 22 seconds' worth of speech.  this means that it
 >:needs to be "optimized" by over a factor of 10 before it will be usable
 >:in even a half-duplex mode.
 
 >ouch!  thanks for trying it.
 
 the following program is a very quick hack i created a few months
 ago to determine whether a sun sparcstation ipc could perform
 real-time, full-duplex encrypted audio with resulting data rates
 sustainable by today's modems.
 
 this test program reads linearly-encoded audio from the audio device,
 compresses it with gsm 06.10 (compresses frames of 160 13-bit samples
 recorded at 8khz into 260 bits resulting in a 50 hz frame rate), encrypts
 it with des, then reverses the process and sends the reconstructed audio
 back to the audio device.  the compressed, encrypted audio stream
 is 13 kbits/s (!).
 
 my sparcstation ipc (not exactly a very fast machine these days,
 certainly slower than an elc) would just barely sustain this activity
 (audio underruns would occcur but the speech was very intelligible).  i
 ran it as a real-time process to get the best results.  remember,
 though, that this program is a quick hack and the performance can
 certainly be improved.
 
 the audio compression routines can be ftp'd from tub.cs.tu-berlin.de,
 i believe (look for gsm or toast).  i used eric young's des
 implementation but i no longer know where i got it from.
 
 cheers!greg
 
 <--------------------------- cut here ----------------------------->
 /*
  * test program to see how much cpu it takes for secure digital audio.
  * written by g. onufer (greg@cheers.bungi.com).
  *
  * written on a sun ipc running solaris 2.2 with a sun isdn s-bus card
  * and a speakerbox.
  */
 #include <stdlib.h>
 #include <unistd.h>
 #include <fcntl.h>
 #include <stdio.h>
 #include <sys/types.h>
 #include <sys/audioio.h>
 #include <stropts.h>
 
 #include <gsm.h>
 #include <des.h>
 
 boolean_t
 svs_audio_init(int fd, audio_info_t *prev_info)
 {
 	audio_info_t info;
 
 	if (prev_info != null) {
 		if (ioctl(fd, audio_getinfo, prev_info) < 0) {
 			perror("audio_getinfo");
 			return (b_false);
 		}
 	}
 
 	audio_initinfo(&info);
 
 	info.record.pause = b_true;
 	info.play.pause = b_true;
 
 	info.play.sample_rate = 8000;
 	info.play.encoding = audio_encoding_linear;
 	info.play.channels = 1;
 	info.play.precision = 16;
 	info.record.sample_rate = 8000;
 	info.record.encoding = audio_encoding_linear;
 	info.record.channels = 1;
 	info.record.precision = 16;
 
 	info.record.buffer_size = 320 * 4;
 
 	if (ioctl(fd, audio_setinfo, &info) < 0) {
 		perror("audio_setinfo");
 		return (b_false);
 	}
 
 	if (ioctl(fd, i_flush, flushrw) < 0) {
 		perror("i_flush");
 		return (b_false);
 	}
 
 	
 	audio_initinfo(&info);
 
 	info.record.pause = b_false;
 	info.play.pause = b_false;
 
 	if (ioctl(fd, audio_setinfo, &info) < 0) {
 		perror("audio_setinfo");
 		return (b_false);
 	}
 
 	return (b_true);
 }
 
 
 boolean_t
 svs_in(int ifd, gsm handle, gsm_byte *buf)
 {
 	gsm_signal sample[160];
 
 	if (read(ifd, sample, sizeof (sample)) != sizeof (sample)) {
 		fprintf(stderr, "svs_in: short read\n");
 		return (b_false);
 	}
 
 	gsm_encode(handle, sample, buf);
 
 	return (b_true);
 }
 
 
 boolean_t
 svs_out(int ofd, gsm handle, gsm_byte *buf)
 {
 	gsm_signal sample[160];
 
 	if (gsm_decode(handle, buf, sample) < 0) {
 		fprintf(stderr, "svs_out: gsm_decode failed\n");
 		return (b_false);
 	}
 
 	if (write(ofd, sample, sizeof (sample)) != sizeof (sample)) {
 		fprintf(stderr, "svs_out: short write\n");
 		return (b_false);
 	}
 
 	return (b_true);
 }
 
 
 main()
 {
 	gsm handle;
 	gsm_frame frame;
 	int audiofd;
 	int option;
 	des_cblock key, ivec_in, ivec_out;
 	des_key_schedule ks_in, ks_out;
 	des_cblock cbuf_in[4], cbuf_out[4], cbuf_buf[4];
 
 	audiofd = open("/dev/audio", o_rdwr);
 	if (audiofd < 0) {
 		perror("open");
 		exit(4);
 	}
 
 	/*
 	 * initialize gsm compression code
 	 */
 	if ((handle = gsm_create()) == null) {
 		fprintf(stderr, "svs: gsm_create failed\n");
 		exit(4);
 	}
 
 	option = b_true;
 	if (gsm_option(handle, gsm_opt_fast, &option) < 0) {
 		fprintf(stderr, "svs: gsm_option (fast) failed\n");
 		exit(4);
 	}
 
 	/*
 	 * initialize des code
 	 */
 	des_random_key(&key);
 
 	if (des_set_key(&key, ks_in) < 0) {
 		fprintf(stderr, "svs: des_set_key failed\n");
 		exit(4);
 	}
 	if (des_set_key(&key, ks_out) < 0) {
 		fprintf(stderr, "svs: des_set_key failed\n");
 		exit(4);
 	}
 	memset(ivec_in, 0, sizeof (ivec_in));
 	memset(ivec_out, 0, sizeof (ivec_out));
 
 	/*
 	 * open audio device and configure it
 	 */
 	if (!svs_audio_init(audiofd, null))
 		exit(3);
 
 	for (;;) {
 		/*
 		 * get 160 samples (16-bit linear 8000hz) and
 		 * convert to a 33 byte frame
 		 */
 		if (!svs_in(audiofd, handle, frame))
 			exit(1);
 
 		/*
 		 * encrypt/decrypt block
 		 */
 		des_cbc_encrypt(frame, cbuf_out, (long)32, ks_in, ivec_in,
 		    des_encrypt);
 		des_cbc_encrypt(cbuf_out, cbuf_buf, (long)32, ks_out, ivec_out,
 		    des_decrypt);
 
 		memmove(frame, cbuf_buf, 32);
 
 #if 0
 		if (memcmp(cbuf_in, cbuf_buf, 32) != 0) {
 			fprintf(stderr, "svs: memcmp failed\n");
 			exit(4);
 		}
 #endif
 
 		/*
 		 * take 33 byte frame and convert to 160 samples
 		 * and play
 		 */
 		if (!svs_out(audiofd, handle, frame))
 			exit(2);
 	}
 
 	gsm_destroy(handle);
 }
 <--------------------------- cut here ----------------------------->
 