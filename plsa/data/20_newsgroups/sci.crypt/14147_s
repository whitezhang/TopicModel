
 archive-name: ripem/faq
 last-update: sun, 7 mar 93 21:00:00 -0500
 
 about this posting
 ------------------
 this is a (still rather rough) listing of likely questions and
 information about ripem, a program for public key mail encryption.  it
 (this faq, not ripem) was written and will be maintained by marc
 vanheyningen, <mvanheyn@whale.cs.indiana.edu>.  it will be posted to a
 variety of newsgroups on a monthly basis; follow-up discussion specific
 to ripem is redirected to the group alt.security.ripem.
 
 this month, i have reformatted this posting in an attempt to comply
 with the standards for hypertext faq formatting to allow easy
 manipulation of this document over the world wide web.  let me know
 what you think.
 
 disclaimer
 ----------
 nothing in this faq should be considered legal advice, or anything
 other than one person's opinion.  if you want real legal advice, talk
 to a real lawyer.
 
 questions and answers
 ---------------------
 
 1)  what is ripem?
 
  ripem is a program which performs privacy enhanced mail (pem) using
  the cryptographic techniques of rsa and des.  it allows your
  electronic mail to have the properties of authentication (i.e. who
  sent it can be confirmed) and privacy (i.e. nobody can read it except
  the intended recipient.)
 
  ripem was written primarily by mark riordan <mrr@scss3.cl.msu.edu>.
  most of the code is in the public domain, except for the rsa routines,
  which are a library called rsaref licensed from rsa data security inc.
 
 2)  how can i get ripem?
 
  ripem contains the library of cryptographic routines rsaref, which is
  considered munitions and thus is export-restricted from distribution
  to people who are not citizens or permanent residents of the u.s. or
  canada.  therefore, the following request is quoted from the readme
  file:
 
  #please do not export the cryptographic code in this distribution
  #outside of the usa or canada.  this is a personal request from me,
  #the author of ripem, and a condition of your use of ripem.
 
  note that rsaref is not in the public domain, and a license for it is
  included with the distribution.  you should read it before using
  ripem.
 
  the best way to get it is to ask a friend for a copy, since this will
  reduce the load on those sites that do carry it (not to mention the
  humans that run them.)  naturally this requires that you trust the
  friend.
 
  ripem is available via anonymous ftp to citizens and permanent residents
  in the u.s. from rsa.com; cd to rsaref/ and read the readme file for
  info.  last i looked, this site contains only the source tree, and
  does not contain compiled binaries or the nice mac version.
 
  ripem, as well as some other crypt stuff, has its "home site" on
  rpub.cl.msu.edu, which is open to non-anonymous ftp for users in the
  u.s. and canada who are citizens or permanent residents.  to find out
  how to obtain access, ftp there, cd to pub/crypt/, and read the file
  getting_access.  for convenience, binaries for many architectures are
  available here in addition to the full source tree.
 
 3)  will ripem run on my machine?
 
  probably.  it has already been ported to ms-dos and most flavors of
  unix (sunos, next, linux, aix, ultrix, solaris, etc.)  ports to
  macintosh include a standard unix-style port and a rather nice
  mac-like port written by raymond lau, author of stuffit.  more ports
  are expected, and help of users is invited.
 
 4)  will ripem work with my mailer?
 
  probably.  how easy and clean the effective interface is will depend
  on the sophistication and modularity of the mailer, though.  the users
  guide, included with the distribution, discusses ways to use ripem
  with many popular mailers, including berkeley, mush, elm, and mh.
  code is also included in elisp to allow easy use of ripem inside gnu
  emacs.
 
  if you make a new interface for ripem or create an improvement on one
  in the distribution which you believe is convenient to use, secure,
  and may be useful to others, feel free to post it to alt.security.ripem.
 
 5)  what is rsa?
 
  rsa is a crypto system which is asymmetric, or public-key.  this means
  that there are two different, related keys: one to encrypt and one to
  decrypt.  because one cannot (reasonably) be derived from the other,
  you may publish your encryption, or public key widely and keep your
  decryption, or private key to yourself.  anyone can use your public
  key to encrypt a message, but only you hold the private key needed to
  decrypt it.  (note that the "message" sent with rsa is normally just
  the des key to the real message. (see "what is des?")
 
  note that the above only provides for privacy.  for authentication,
  the fingerprint of the message (see "what is a fingerprint, like
  md5?") is encrypted with the sender's private key.  the recipient can
  use the sender's public key to decrypt it and confirm that the message
  must have come from the sender.
 
  rsa was named for the three men (rivest, shamir and adleman) who
  invented it.  to find out more about rsa, ftp to rsa.com and look in
  pub/faq/ or look in sci.crypt.
 
 6)  what is des?
 
  des is the data encryption standard, a widely used symmetric, or
  secret-key, crypto system.  unlike rsa, des uses the same key to
  encrypt and decrypt messages.  however, des is much faster than rsa.
 
  ripem uses both des and rsa; it generates a random key and encrypts
  your mail with des using that key.  it then encrypts that key with the
  recipient's public rsa key and includes the result in the letter,
  allowing the recipient to recover the des key.
 
  des is sometimes considered weak because it is somewhat old and uses a
  key length considered too short by modern standards.  however, it
  should be reasonably safe against an opponent smaller than a large
  corporation or government agency.  it is not unlikely that future
  ripems will strengthen the symmetric cipher, possibly by using
  multiple encryption with des.
 
 7)  what is pem, and how does ripem relate?
 
  pem is privacy enhanced mail, a system for allowing easy transfer of
  encrypted electronic mail.  it is described in rfcs 1421-1424; these
  documents have been approved and obsolete the old rfcs 1113-1115.
 
  ripem is not really a complete implementation of pem, because pem
  specifies certificates for authenticating keys, which ripem does not
  handle at this time.  their addition is planned.
 
 8)  what's this about distributing and authenticating keys?
 
  for a remote user to be able to send secure mail to you, she must know
  your public key.  for you to be able to confirm that the message
  received came from her, you must know her public key.  it is important
  that this information be accurate; if a "bad guy" convinces her that
  his key is in fact yours, she will send messages which he can read.
 
  ripem allows for three methods of key management: a central server,
  the distributed finger servers, and a flat file.  all three are
  described in the ripem users guide which is part of the distribution.
  none of them provide perfect security.
 
 9)  why do all ripem public keys look very similar?
 
  ripem public keys begin with a pkcs identifier describing various
  characteristics about the key, so the first bunch of characters in
  your key may be the same as those of lots of other people's keys.
  this does not mean your keys are similar, but only that they are the
  same class of key, were generated with the same program, are of the
  same length, etc.
 
 10)  what is a fingerprint, like md5?
 
  md5 is a message digest algorithm produced by rsa data security inc.
  it provides a 128-bit fingerprint, or cryptographically secure hash,
  of the plaintext.  it is cryptographically secure because it is not
  possible (in a reasonable amount of computation) to produce a
  different plaintext which produces the same fingerprint.  thus,
  instead of signing the entire message with the sender's private key,
  only the md5 of the message needs to be signed for authentication.
 
  md5 is sometimes used for other purposes; for example, it is often
  used to map an input of arbitrary length to 128 bits of data, as a
  passphrase interpreter or cookie generator.
 
  md5 is described in its entirety (including an implementation in c) in
  rfc 1321.
 
 11)  what is pgp?
 
  pgp is another cryptographic mail program called pretty good privacy.
  pgp has been around longer than ripem, and works somewhat differently.
  pgp is not compatible with ripem in any way, though pgp does also use rsa.
 
  some major differences between pgp and ripem:
 
  - pgp has more key management features, particularly for users without
    a direct network connection.
 
  - ripem conforms to the pem rfcs and thus has a greater probability of
    working with other pem software.  pgp makes no attempt to be compatible
    with anything other than pgp (in fact, pgp 1.0 is not compatible with
    pgp 2.0.)
 
  - ripem uses rsaref, a library of rsa routines from rsa data security
    inc.  rsaref comes with a license which allows noncommercial use.
    pgp uses its own implementation of rsa which is not licensed; thus,
    pkp, the firm holding the u.s. patents on the rsa algorithm, claims
    that it is a infringement of that patent to make, use or sell pgp in
    the u.s. or canada.  in acknowledgement of this, pgp's original
    author, phil zimmermann, says in the documentation:
 
    #in fact, if you live in the usa, and you are not a federal agency, 
    #you shouldn't actually run pgp on your computer, because public
    #key partners wants to forbid you from running my software.  pgp is
    #contraband.  
 
  - both pgp and ripem are export-restricted, and cannot be sent outside
    the u.s. and canada.  however, pgp already exists on many ftp sites
    in europe and other places.
 
  whether you use pgp or ripem or whatever, the documentation to pgp is
  recommended reading to anyone interested in such issues.
 
  note that the above facts, both regarding patent and export
  restrictions, are somewhat controversial; many people think it
  shouldn't be that way, and some people interpret various documents
  differently.  unfortunately, discussions of it on the net inevitably
  seem to produce more heat than light, and probably belong in
  misc.legal.computing.  (see:  "disclaimer")
 
 12)  what about rpem?
 
  rpem stands for rabin privacy enhanced mail.  it was similar to ripem,
  but used a public-key cipher invented by rabin (which is not rsa) in
  an attempt to avoid the patent on rsa.  it was written by mark
  riordan, the same author as ripem.
 
  its distribution was halted when, contrary to the beliefs of many
  (including rabin), public key partners (pkp) claimed that their patent
  was broad enough to cover any public-key cipher whose strength rested
  in the difficulty of factoring products of large primes, not just rsa.
  this claim is not universally accepted by any means, but was not
  challenged for pragmatic reasons.
 
  rpem is not really used anymore.  it is not compatible with ripem or pgp.
 
 13)  what is mime?
 
  mime stands for multipurpose internet mail extensions, and is
  described in rfc 1341.  you can find out about it in the newsgroup
  comp.mail.mime.  how pem should interact with mime is not yet entirely
  clear; some people use the stopgap solution of having a mime type
  application/x-ripem in order to send ripem messages as mime ones.  i
  hope some standards will emerge.  draft internet documents exist on
  the matter.
 
 14)  i have this simple way to defeat the security of ripem...
 
  you may wish to check the companion post "ripem-attacks" which
  discusses some of the more obvious attacks on ripem's security and
  what procedures will minimize the risk.  ripem's main "weak area" is
  probably key distribution.
 