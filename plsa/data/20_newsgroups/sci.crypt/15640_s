	<1993apr20.150531.2059@magnus.acs.ohio-state.edu>
 	<1993apr20.192105.11751@ulysses.att.com> <c5sy1z.4td@demon.co.uk>
 	<1993apr21.132318.16981@ulysses.att.com>
 date: wed, 21 apr 1993 16:49:40 gmt
 lines: 42
 
 
 in article <1993apr21.132318.16981@ulysses.att.com> smb@research.att.com (steven bellovin) writes:
 
    in article <c5sy1z.4td@demon.co.uk>, graham toal <gtoal@gtoal.com> writes:
    > in article <1993apr20.192105.11751@ulysses.att.com> smb@research.att.com (steven bellovin) writes:
    > :thousands?  tens of thousands?  do some arithmetic, please...  skipjack
    > :has 2^80 possible keys.
    > 
    > we don't yet know if all 80 bits count.
 
    that doesn't worry me at all; they're not going to cheat at something
    they can get caught at.  and key size is one of the things that can be
    verified externally.  feed lots of random key/input pairs into the
    chip, then try flipping random key bits, and see what happens to the
    output.  we already know what *should* happen -- about half the output
    bits should vary, on average, from a 1-bit key change or input change.
 
    if they were out to build a weak cryptosystem, it might be the case that
    some of the bits are much less powerful than others, in the sense that
    they only enter into the encryption very late in the game.  by contrast,
    des was designed to use each key bit as early as possible; the 50% output
    change rate appears as early as round 5.  again, though, i don't think
    nsa is going to cheat that crudely; they're likely to get caught.
 
 consider a cryptosytem that starts out by xoring bits 23 and 47, and
 not using either of these bits except through this xor. this system
 makes early use of every bit. but an exhaustive key search would now
 only have 2^79 keys to search. your test by varying single key bits
 wouldn't turn up anything interesting.
 
    remember that they've promised to let a committee of outside experts see
    the cryptosystem design.  if you assume something des-like, a biased
    subkey generation schedule will stick out like a sore thumb.
 
 the algorithm i suggest above would stick out like a sore thumb, but
 i'm sure i could design a system with a more subtle key redundancy
 which was well-hidden, but would still make an exhaustive key search
 take far less than 2^80 encryptions. i don't believe your claim that
 the real keysize can be verified externally.
 
 							andy latto
 							andyl@harlequin.com
 