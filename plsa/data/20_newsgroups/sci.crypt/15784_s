
 
 in article <strnlghtc5wcmo.fx5@netcom.com>, strnlght@netcom.com (david sternlight) writes:
 > in article <c5uvn4.mf7@austin.ibm.com> arussell@austin.ibm.com (ag russell)
 > writes:
 > 
 > >
 > >at the company i worked for previously, i received a file that was des encryped
 > >and the person that had sent it, went on vaction.  rather than wait two weeks
 > >i set up a straight frontal attack with one key at a time.  it only took two(2)
 > >days to crack the file.  no, i don't have any faith in des.
 > >
 > 
 > taking this at face value (though it seems quite dissonant with much else
 > that has been published here about brute force des cracking, unless russell
 > was lucky with respect to the key), i'd be very interested in whether the
 > program russell used is available? in whether he used a cleartext
 > recognition algorithm in the program or whether he had to examine each
 > decryption by hand? in whether he used a known plaintext attack?
 
 given that certain archival methods have certain key(cleartext) in a file i
 used a programatic dictionary attack.  i used the des library provided with the
 system that i was using.  what is to keep anyone from being lucky with a key?
  
 > he probably should also tell us, given his address, what machine he used--a
 > desktop, workstation, or super-computer.
 
 my previous employment has nothing to do with my current address, other than
 the fact that the fastest machine in the office was an ibm risc system/6000 
 model 530, with 16 meg of memory.(not a super-computer)
  
 > depending on his answer, this could be an appalling development calling into
 > question both des and rsa/des. dunno about rsa/idea.
 
 i really think this more of a statement of the limitations placed on the key
 by the interface(ascii char/no padding), and most programs don't bother to
 clear off the archival front and backend id's.
 
 > if any bright programmer with a little idle machine time can crack a single
 > des message in a couple of days (assuming no tricks that are
 > message-specific), then here's my clipper key, nsa; give me the chip at
 > once.  :-)
 
 yes any moderatly bright programmer with a little idle machine time, can
 crack most of todays real world encryption.  i sure that you or i could
 select a key, and prepare the data inorder that the decryption will become a 
 worst case.  but that is not the real world, and i'm sure that is how any 
 agency would start an attack on a message, as you pointed out, there are some 
 very good recognition algorithms availible, i'm just not familiar with them.
 
 a.g.
 -- 
 a.g. russell   dept a06s  oltp section of pals group   vm id  sc39093 at ausvm1
 email  arussell@austin.ibm.com       phone 512-838-7953        tieline 678-7953
 these are my views, on anyone else they would look silly. free the berkeley 4.4
 