	<1993apr22.092830.2190@infodev.cam.ac.uk>
 date: thu, 22 apr 1993 19:00:27 gmt
 lines: 38
 
 | 
 | shared memory putimage (also mentioned by nkissebe@delphi.beckman.uiuc.edu,
 | nick kisseberth) looks interesting, but i need someone to point me to some
 | documentation. is this method likely to give better results than server-
 | resident pixmaps? i'd also be interested in looking at the xview code
 | mentioned above...
 
 there is no easy answer to this question: it depends on whether the display
 device can hold pixmaps in off-screen memory, and if so, how efficiently
 the server manages these resources (having to deal with limited off-screen
 memory is the bane of the server implementor's existence!).  
 
 i have worked with graphics devices where the off-screen memory to 
 main display copy rate eclipses that of the main memory to display copy
 rate, and with those where the main memory to display is *faster* than
 off-screen to display (requires only a write to the framebuffer rather
 than a read of the f.b. followed by a write)
 
 if your server uses the cfb code or something like it to render into
 pixmaps in cpu main memory, the rates you can get through mit-shm are
 likely to be equal (maybe a tad slower, depending on your os's implementation
 of shared memory) to copyarea from pixmap to window, which is also then
 just a copy from cpu main memory to graphics device.
 
 one advanage of mit-shm is that if your images are large, you don't end up
 growing the size of the server process to hold them.
 
 one disadvantage of the mit-shm is that, in its sample implementation,
 there is no provision for elegantly cleaning up the shared memory segments
 if the client dies a sudden, violent death (e.g., "kill").  you have to 
 be mindful of cluttering up the system with zombie shared memory segments.
 
 	ken
 --
 kenneth whaley			 (408) 748-6347
 kubota pacific computer, inc.	 email: whaley@kpc.com
 2630 walsh avenue
 santa clara, ca.  95051
 