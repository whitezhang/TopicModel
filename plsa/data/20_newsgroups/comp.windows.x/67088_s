
 
 dear sgi and netter gl-x mixed-model experts,
 i am writing a mixed model application that creates a couple different
 color maps for different windows, and i've been having trouble getting
 the window manager to reliably honor my requests.  in some environments
 (entry level r3000 indigo w/ 4.0.5) all windows are getting properly
 connected to their designated color maps, but on others (an iris 4d 240/gtx;
 also a different entry level indigo) the color mapping is unreliable
 and changes behavior when i compile at different times.  the most common
 problem is that all non-top-level windows fail to be displayed according
 to their colormap.  my application starts out by creating three top-level
 windows; in some cases all but the first of these also fail to be
 displayed by their colormap.  this is spectacularly aggravating.
 
 i would dearly appreciate
   1. an explanation of the standard, right, correct way to give a window
   a colormap such that the window manager will honor and obey it;
 
   2. any advice about problems that could cause my failure to get my
   desired colormaps.
 
 by now i have exhausted my own attempts on this, having tried everything
 reasonable or imaginable.
 
 below is example code giving the schematic for how i have been *trying*
 to do this.  please, please, please somebody tell me what i am doing
 wrong/how to do it right!!!
 
 
 yours,
 
 chris lee
 
 /***********************************************************************/
 display* dpy;  /* declare some data... */
 colormap popup_cmap;
 xcolor mycolor;
 window win;
 xsetwindowattributes cwa;
 int nwlist;
 window *wlist;
 
 /* nb: for brevity, not showing all code lines--just a schematic */
 
 popup_cmap=xcreatecolormap(dpy,defaultrootwindow(dpy),vis->visual,allocall);
 
 /* here we store a bunch of colors using
    xstorecolor(dpy,popup_cmap,&mycolor); ... */
 
 cwa.colormap = popup_cmap;
 win = xcreatewindow(dpy, parent, x, y, w, h,
                     borderwidth, vis->depth, inputoutput, vis->visual,
                     cwcolormap|cwborderpixel, &cwa);
 
 
 /* list all sub windows of my_topwin, parent of win, into wlist;
    nwlist is counter of entries in wlist.
 
    nb: wlist is static storage that can be relied on not to go away
        or be corrupted.  i thought of that!  does anyone know if
        setting wm properties is by data copy, or by reference pointer?
 
        ie. is it acceptable to pass data for a property, then free
        the data?   */
 xsetwmcolormapwindows(dpy,my_topwin,wlist,nwlist);
 
 xmapraised(display0,win);
 
 /* later on we handle xevents normally... typical eventloop */
 
 
 