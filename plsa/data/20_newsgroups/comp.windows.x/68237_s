
 in article <1sk97rinnptb@polaris.isi.com> kin@isi.com (kin cho) writes:
 >
 >i can also live with a utility that converts postscript to plain
 >text, perferably retaining page counts so that i know how many pages
 >the original document contains.
 >
 
 	well, i know of one hack to sort of do this conversion.  first
 get ghostscript and check out the gs_2asc.ps file that comes with it.
 it prints out some information about where each text string goes on the
 page, and maintains page counts.  i've written a little c program to
 massage the output of gs -dnodisplay gs_2asc.ps somewhat, so that you
 can get all the ascii strings in the document.  no guarantees that it
 won't break up words/sentences, though - i've used it with varying
 degrees of success.  anyways, try this out, it may do what you want.
 
 /*
  * massager: a filter for use with gs; does crude postscript->ascii conversion
  *
  * usage:
  *	cat file.ps | gs -dnodisplay gs_2asc.ps - | massager
  *
  * i print a <ctrl-l> after each new page.
  *
  * put the following source into massager.c and compile it:
  */
 
 #include <stdio.h>
 #include <string.h>
 
 main()
 {
 	char	line[1000], *p;
 
 	while (fgets(line, sizeof(line), stdin) != null)
 		if (line[0] == 'p')
 			printf("\f\n");
 		else if (line[0] == 's' && line[1] == ' ') {
 			if ((p = strrchr(line, ')')) == null)
 				continue;
 			*p = '\0';
 			if ((p = strchr(line, '(')) == null)
 				continue;
 			for (p++; *p; p++)
 				if (*p != '\\' || (p[1] != ')' && p[1] != '('))
 					putchar(*p);
 			putchar('\n');
 		}
 
 	return(0);
 }
 
 --------------------------------------------------------------------------------
 david wagner                                              dawagner@princeton.edu
 