
 in article <1993apr21.165310.14544@dsd.es.com>, pmartz@dsd.es.com (paul martz) writes:
 > in article <1993apr21.154620.16330@infodev.cam.ac.uk>, dcr@mail.ast.cam.ac.uk (derek c. richardson) writes:
 > > hi, i'm new to this group so please bear with me!
 > > 
 > > two years ago i wrote a sunview application for fast animation
 > > of raster files. with sunview becoming rapidly obselete, i've
 > > finally decided to rewrite everything from scratch in xview.
 > > i put together a quick test, and i've found that xputimage()
 > > is considerably slower (factor of 2 on average?) than the
 > > sunview command pw_rop() which moves image data from memory
 > > pixrects to a canvas. this was on a sparc ipx. it seems that:
 > > (1) the x protocol communication is slowing things down; or
 > > (2) xputimage is inefficient...or both!
 > 
 > using xputimage, your source is maintained by the client and the
 > destination is maintained by the server, thus you incur the overhead
 > of transporting through whatever client-server communications
 > mechanism you are using.
 > 
 > is it possible for you to maintain your source images in pixmaps?
 > these are maintained by the server, so copying them into a window is
 > much cheaper.
 > 
 > also make sure you are not sending any unnecessary xsyncs, or running
 > in xsynchonize mode.
 
   if you need speed, and your client can run on the same host as the x server,
   you should use the shared memory extension to the sample x server (mit-shm).
   xdpyinfo  will tell you if your server has this extension. this is certainly
   available with the sample mit x server running under sunos.
   a word of warning: make sure your kernel is configured to support shared
   memory. and another word of warning: openwindows is slower than the mit
   server.
   i have written an imaging tool (using xview for the gui, by the way) which
   yields over 10 frames per second for 512*512*8 bit images, running on a sparc
   ipc (half the cpu grunt of an ipx). this has proved quite sufficient for
   animations.
 
 				regards,
 
 					richard gooch....
 