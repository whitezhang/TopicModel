	<1993apr22.092830.2190@infodev.cam.ac.uk>
 nntp-posting-host: po5.andrew.cmu.edu
 in-reply-to: <1993apr22.092830.2190@infodev.cam.ac.uk>
 
 dcr@mail.ast.cam.ac.uk (derek c. richardson) writes:
 > shared memory putimage (also mentioned by nkissebe@delphi.beckman.uiuc.edu,
 > nick kisseberth) looks interesting, but i need someone to point me to some
 > documentation. is this method likely to give better results than server-
 > resident pixmaps? i'd also be interested in looking at the xview code
 > mentioned above...
 
   there's documentation on how to use the shared memory extension in the
 x11r5 distribution.
 
   actually, i just finished writing a motif animation program...
 (take-lots-of-image-data-and-display-it-pretty-darn-fast). when using
 on-server pixmaps or shared memory, i had to insert a delay loop to keep
 it from going too quickly :). testing both methods side by side, they
 were just about equal.
 
   the advantage of shm is that your x server doesn't grow to ridiculous
 sizes; but pixmaps can work over a network and *are* removed if your
 application dies (one tends to use ipcrm manually quite a bit when
 debugging shm apps).
 
   shared memory also has the problem that some operating systems (e.g.
 ultrix) seem to allow only a small number of segments (~6) to be
 attached to a process at once; consequently, a redraw becomes
 xshmattach();xshmputimage();xshmdetach(); on dec systems. and dec's 24
 bit displays (like the ones i tend to use most often) don't seem to
 support the extension (maybe someone compiled them wrong?), and using
 pixmaps causes the x server to crash (failed mallocs), so one *has* to
 use the local unix domain socket (which really isn't that bad; one
 copies the info three times per redraw instead of one).
 
   in short: allowing all three forms of display, within the program is a
 good thing (minus shm if running over a network), and let the user pick
 whatever feels fastest.
 
   (i just use an ximagehandler class and forget about it :)
 
   )rob
 