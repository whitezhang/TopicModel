
 hi, all:
     i am studying the book --> "unix desktop guide to open look".
 there is an example --> winprop.c that demonstrate how to program
 wm_protocols property in chapter 8.  it can run, but only show the
 static text messages, no notice pop_up. what is the problem?
 	    thanks in advance for help!!1	    iop
 /*-------------------------------------------------------------*/
 /*  file:  winprop.c
  *
  *  shows how to set properties on a window.
  *
  */
 #include <x11/xatom.h>	/* for definition of xa_atom */
 #include <x11/intrinsic.h>
 #include <x11/stringdefs.h>
 #include <xol/openlook.h>
 #include <xol/statictext.h>
 #include <xol/oblongbutt.h>
 #include <xol/notice.h>
 /* this file defines the atoms with _ol_ prefix */
 /* id of the top-level and noticeshell widget */
 static widget top_level, notice_shell;
 static widget make_notice();
 static char message[] = "clients use properties to communicate \
 with the window manager. this example illustrates how an open \
 look application requests notification from the window manager \
 when certain events occur. the communication is in the form of \
 a clientmessage event that the application processes in an \
 event-handler.";
 /* atoms used for inter-client communication */
 atom atom_wm_protocols, atom_wm_delete_window,
      atom_wm_save_yourself;
 static void handle_wm_messages();
 static void save_and_exit();
 static void save_yourself();
 static void pop_notice();
 static void do_exit();
 /* string to hold comand line (for use in responding to
  * the wm_save_yourself protocol message.
  */
 char saved_cmdline[128];
 /*-------------------------------------------------------------*/
 void main(argc, argv)
 int  argc;
 char **argv;
 {
     widget w;
     int i;
 /* save the command-line for use in responding to the
  * wm_save_yourself protocol message.
  */
     sprintf(saved_cmdline, "%s ", argv[0]);
     if(argc > 1)
 	for(i = 1; i < argc; i++)
 	{
 	    strcat(saved_cmdline, argv[i]);
 	    strcat(saved_cmdline, " ");
 	}
 /* create and initialize the top-level widget */
     top_level = olinitialize(argv[0], "ol_main", null,
 			       0, &argc, argv);
 /* create a statictext widget */
     w = xtvacreatemanagedwidget("stext",
 		      statictextwidgetclass, top_level,
 		      xtnstring,    message,
 		      xtnwidth,     200,
 		      null);
 /* create a noticeshell widget for later use */
     make_notice(top_level);
 /* intern the atoms */
     atom_wm_protocols = xinternatom(xtdisplay(w),
 					"wm_protocols", false);
     atom_wm_delete_window = xinternatom(xtdisplay(w),
 				    "wm_delete_window", false);
     atom_wm_save_yourself = xinternatom(xtdisplay(w),
 				    "wm_save_yourself", false);
 /* add an event-handler to process clientmessage events sent
  * by the window manager
  */
     xtaddeventhandler(top_level, noeventmask, true,
 		      handle_wm_messages, null);
 /* realize the widgets and start processing events */
     xtrealizewidget(top_level);
 /* append the properties wm_delete_window and wm_save_yourself
  * to the definition of the wm_protocols property. this step
  * requires the window id of the top-level widget. the window
  * id is valid only after the widget is realized.
  */
     xchangeproperty(xtdisplay(top_level), xtwindow(top_level),
 		    atom_wm_protocols, xa_atom, 32,
 		    propmodeappend,
 		    &atom_wm_delete_window, 1);
     xchangeproperty(xtdisplay(top_level), xtwindow(top_level),
 		    atom_wm_protocols, xa_atom, 32,
 		    propmodeappend,
 		    &atom_wm_save_yourself, 1);
     xtmainloop();
 }
 /*-------------------------------------------------------------*/
 static void handle_wm_messages(w, client_data, p_event)
 widget	  w;
 xtpointer client_data;
 xevent	  *p_event;
 {
     if(p_event->type == clientmessage &&
        p_event->xclient.message_type == atom_wm_protocols)
     {
 	if(p_event->xclient.data.l[0] == atom_wm_delete_window)
 	{
 		save_and_exit();
 	}
 	if(p_event->xclient.data.l[0] == atom_wm_save_yourself)
 	{
 		save_yourself();
 	}
     }
 }
 /*-------------------------------------------------------------*/
 static void save_and_exit()
 {
 /* display a notice giving the user a chance to respond */
     pop_notice(top_level, notice_shell);
 }
 /*-------------------------------------------------------------*/
 static void save_yourself()
 {
 /* set the wm_command property to the saved command-line. */
     xchangeproperty(xtdisplay(top_level), xtwindow(top_level),
 		    xa_wm_command, xa_string, 8,
 		    propmodereplace, saved_cmdline,
 		    strlen(saved_cmdline) + 1);
 }
 /*-------------------------------------------------------------*/
 static widget make_notice(parent)
 widget parent;
 {
     widget w, n_text, n_control, n_exit, n_cancel;
 /* create a button and provide a callback to pop up a notice */
     w = xtvacreatemanagedwidget("quitbutton",
 		      oblongbuttonwidgetclass, parent,
 		      xtnlabel,    "exit...",
 		      null);
     xtaddcallback(w, xtnselect, pop_notice, null);
 /* create the noticeshell widget. note that you have to use
  * xtvacreatepopupshell instead of the usual
  * xtvacreatemanagedwidget.
  */
     notice_shell = xtvacreatepopupshell("quitnotice",
 		      noticeshellwidgetclass, w,
 		      null);
 /* get the id of the text and control area widgets of the
  * noticeshell.
  */
     xtvagetvalues(notice_shell,
 		  xtntextarea,	      &n_text,
 		  xtncontrolarea,     &n_control,
 		  null);
 /* place a message in the text area of the noticeshell */
     xtvasetvalues(n_text,
 	    xtnstring, "please confirm exit from program.",
 	    null);
 /* add buttons to the control area of the noticeshell.
  * each button has an appropriate callback.
  */
     n_exit = xtvacreatemanagedwidget("noticeexit",
 		      oblongbuttonwidgetclass, n_control,
 		      xtnlabel,    "exit",
 		      null);
     xtaddcallback(n_exit, xtnselect, do_exit, null);
     n_cancel = xtvacreatemanagedwidget("noticecancel",
 		      oblongbuttonwidgetclass, n_control,
 		      xtnlabel,    "cancel",
 		      xtndefault,  true,
 		      null);
     return w;
 }
 /*-------------------------------------------------------------*/
 static void pop_notice(w_emanate, w_notice)
 widget	  w_emanate, w_notice;
 {
     xtvasetvalues(w_notice, xtnemanatewidget, w_emanate, null);
 /* pop up the noticeshell widget. the noticeshell widget makes
  * sure that the aplication waits until the user selects from
  * one of the buttons in the noticeshell's control area.
  */
     xtpopup(w_notice, xtgrabexclusive);
 }
 /*-------------------------------------------------------------*/
 static void do_exit(w, call_data, client_data)
 widget	  w;
 xtpointer call_data, client_data;
 {
     xclosedisplay(xtdisplay(w));
     exit(0);
 }
 