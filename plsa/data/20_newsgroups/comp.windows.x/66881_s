
 in article <533@imp.hellnet.org> devil@loki.hellnet.org (gil tene) writes:
 >i am trying to figure out the current c++ toolkit "directions".
 >more simply, i'd like to know which c++ toolkit to "bet on" 
 >for use in a new long term project.
 
 i have the same problem.  i have looked at motif++, wwl, interviews, gina++,
 and a few variations on the above.  i've also done a cursory examination
 of rogue wave's view.h++.  i like view.h++'s abstractions best of all of the
 toolkits i mentioned, but the resulting code looks little like motif, and i
 have little confidence that this software will catch on or otherwise result
 in significant longevity for my code.  gina++ allows you to write code which
 looks a great deal like motif and also makes interesting use of inheritance,
 but the resulting code is almost too motif-like, and is certainly not
 significantly less verbose than equivalent c code.  interviews looks
 promising, but i haven't found a free version with motif support, and i'm
 not confident how widely interviews with motif support will be adopted,
 and what (if any) specific motif support will be available over time.  the
 other libraries produce code which is less motif-like, but which does not make
 sufficient use of the features of c++ to simplify my coding task.
 
 at this point, my inclination is to write my motif manipulation routines in
 c, and invoke those routines from my c++ code using simple abstractions suited
 to my specific task.  later, if osf or some credible standards-setting body
 comes up with a c++ interface to motif, i will change to that.  it does me
 no goo to write in c++ if my choice of interfaces leaves me with code which
 leaves me tied to an abstraction which is not consistent with the industry
 directions.  it's better to take a standard if inferior solution for now
 than to go with a slgihtly superior approach which will leave me with both
 useless code and useless skills a few years from now.  views.h++ is the only
 library i'd consider right now, but in our environment, we'd end up spending
 nearly $5000 to use it, and i can't justify it when it's likely to cause
 short-term productivity decreases as we learn the new abstraction, and is
 unlikely to be a sufficiently long-lived solution for us to reap the benefits
 at the high end of the j curve.
 
 - brad
 -- 
 brad daniels		`	|  "if money can't buy happiness,
 daniels@neosoft.com		|   i guess i'll have to rent it."
 i don't work for neosoft, and	|		- weird al yenkovic
 don't speak for my employer.	|
 