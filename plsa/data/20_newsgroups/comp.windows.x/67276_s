
 
 we developed a toolkit running on the x window system.
 the toolkit copes with any languages based on x11r5's i18n
 facility. as you know, there are 2 kinds of i18n implementation from mit's 
 x11r5 release -- xsi and ximp. our original implementation of the toolkit
 uses xsi.
 
 our toolkit manages each character's size based on our own font management system.
 in order to do that, the 'wchar_t' typed character strings must be decomposed
 to character sets. this means that if one wchar_t type compound string with 
 ascii and kanji mixed, for example, is given, each element of the wchar_t
 array must be checked its corresponding character set based on a bit layout
 and application environment's locale. in this case if the locale is 'japanese',
 each wchar_t character will be classified either to iso8859-1, jisx0208 or so.
 
 we need a function to do this. the function must check how many characters
 from the top are the same character set and what the character set is.
 
 we could not find any public x11r5 function to do that and inevitably, used
 xsi's internal functions to construct that function. the following is the
 source code of that function 'decomposecharacterset()'.
 
 
 //i18n.h
 // this may look like c code, but it is really -*- c++ -*-
 // $id: i18n.h,v 1.1 1992/01/21 12:05:24 iima exp iima $
 
 #ifndef _i18n_h
 #define _i18n_h
 
 #include <x11/xlib.h>
 
 extern int decomposecharacterset(const wchar_t *wc_str,	/* in */
 				 int wc_len,		/* in */
 				 char *buf,		/* out */
 				 int *buflen,		/* in/out */
 				 int *scanned_len,	/* out */
 				 char **charset);	/* out */
 extern xmstring wchartoxmstring(const wchar_t *wc_str);
 extern xmstringcharset charsetofwchar(const wchar_t wc);
 
 #endif /* _i18n_h */
 
 //i18n.cc
 /* $id: i18n.cc,v 1.1 1992/01/21 12:05:05 iima exp $ */
 
 #include <stdlib.h>
 #include <x11/xlibint.h>
 #include <xm/xm.h>
 #include "i18n.h"
 
 extern "c" {
 #include <x11/wchar.h>
 #define _xwcdecomposeglyphcharset xxx_xwcdecomposeglyphcharset
 #define _xmbfscs xxx_xmbfscs
 #define _xmbctidtocsid xxx_xmbctidtocsid
 #include "xlocaleint.h"
 #undef _xwcdecomposeglyphcharset
 #undef _xmbfscs
 #undef _xmbctidtocsid
     extern int _xwcdecomposeglyphcharset(xlocale, const wchar_t*, int,
 					 char*, int*, int*, int*);
     extern charset *_xmbfscs(xlocale, _csid);
     extern _csid _xmbctidtocsid(xlocale, _csid);
 };
 
 int decomposecharacterset(const wchar_t *wc_str,/* in */
 			  int wc_len,		/* in */
 			  char *buf,		/* out */
 			  int *buf_len,		/* in/out */
 			  int *scanned_len,	/* out */
 			  char **charset)	/* out */
 {
     xlocale xlocale = _xfallbackconvert();
     int ctid;
     int status;
     charset *xcharset;
     
     status = _xwcdecomposeglyphcharset(xlocale, wc_str, wc_len, buf,
 				       buf_len, scanned_len, &ctid);
     if (status == success) {
 	xcharset = _xmbfscs(xlocale, _xmbctidtocsid(xlocale, ctid));
 	*charset = (xcharset) ? xcharset->cs_name : null;
     }
     else
 	*charset = null;
     return status;
 }
 ----------------
 
 an included file above, "xlocaleint.h", is also xsi internal and we copied
 the file to the toolkit directory and compiled.
 
 a serious issue occured when we tried to compile a toolkit application on
 our hp machine with its os version of hp-ux9.01.
 
 when we tried to link an application based on our toolkit,
 link errors occured saying that the following functions are missing:
     _xmbctidtocsid (code)
     _xmbfscs (code)
     _xwcdecomposeglyphcharset (code)
     _xfallbackconvert (code)
 
 we had used mit release version of x11r5 and its xsi implementation until
 hp-up9.0 and ran applications successfully. one of the reasons to use xsi was that
 because hp did not release hp's x11r5 until the os 9.0 and we had no way to 
 know how hp's r5 would be implemented. we had hoped xsi's popularity and used 
 its internal functions. 
 
 the hp's linker complains that there are no xsi internal functions implemented.
 we observe from hp's libx11.a, they used some ximp implementation but we are
 not sure if they used mit's vanilla ximp version or their own version of ximp and
 therefore, finding just counter part functions in mit's ximp for xsi does not
 seem to lead us a solution.
 
 my question and goal is to know how we can construct a function like
 'decomposecharacterset()' listed above. is there any function to check
 character set of each element of wchar_t type strings depending on locales?
 if it is a public function, that is perfect but even if it is not, we
 want to use any internal functions in hp's x11r5 as we did for mit's r5.
 
 in order to render a 'wchar_t' type string, there must be some machinery
 to judge character sets and that is how the proper fonts are selected for
 the string. we have no way to find out that without any hp's x11r5 source 
 files. we want to know how we can use that for our goal. 
 any help or comments would be highly appreciated.
 
 i also appreciate if anyone tell me about ximp treating around this area
 even if it is not hp's implementation.
 
 thank you.
 
 --
 				takeshi inoue
 				inoue@crd.yokogawa.co.jp
 				yokogawa electric corporation
 				open systems laboratory	0422(52)5557
 